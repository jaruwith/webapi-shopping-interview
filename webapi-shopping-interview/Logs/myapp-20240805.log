2024-08-05 10:25:36.333 +07:00 [INF] Application Starting
2024-08-05 10:25:36.893 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 10:25:36.968 +07:00 [INF] Saved 7 entities to in-memory store.
2024-08-05 10:25:36.975 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 10:25:37.109 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 10:25:37.111 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 10:25:37.113 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 10:25:37.118 +07:00 [INF] Hosting environment: Development
2024-08-05 10:25:37.118 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 10:25:37.247 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 10:25:37.490 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 246.3563ms
2024-08-05 10:25:37.492 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 10:25:37.492 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 10:25:37.501 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 8.6673ms
2024-08-05 10:25:37.542 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 50.2506ms
2024-08-05 10:25:37.570 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 10:25:37.652 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 81.1434ms
2024-08-05 10:25:40.242 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 10:25:40.267 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 10:25:40.284 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 10:25:43.818 +07:00 [INF] Fetching all products from the database.
2024-08-05 10:25:43.828 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 10:25:43.962 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 10:25:44.033 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3740.8585ms
2024-08-05 10:25:44.035 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 10:25:44.043 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 3801.1595ms
2024-08-05 10:34:28.861 +07:00 [INF] Application Starting
2024-08-05 10:34:29.389 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 10:34:29.463 +07:00 [INF] Saved 7 entities to in-memory store.
2024-08-05 10:34:29.471 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 10:34:29.608 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 10:34:29.609 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 10:34:29.610 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 10:34:29.611 +07:00 [INF] Hosting environment: Development
2024-08-05 10:34:29.611 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 10:34:30.185 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 10:34:30.426 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 244.3296ms
2024-08-05 10:34:30.428 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 10:34:30.428 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 10:34:30.436 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 7.3134ms
2024-08-05 10:34:30.473 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 44.2975ms
2024-08-05 10:34:30.503 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 10:34:30.579 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 75.2746ms
2024-08-05 10:37:02.691 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 10:37:02.750 +07:00 [INF] CORS policy execution successful.
2024-08-05 10:37:02.763 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 10:37:02.793 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 10:37:02.814 +07:00 [INF] Fetching all products from the database.
2024-08-05 10:37:02.825 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 10:37:03.114 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 10:37:03.180 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 10:37:03.258 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 449.2073ms
2024-08-05 10:37:03.261 +07:00 [INF] CORS policy execution successful.
2024-08-05 10:37:03.267 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 10:37:03.267 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 10:37:03.274 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 583.0218ms
2024-08-05 10:37:03.275 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 10:37:03.277 +07:00 [INF] Fetching all products from the database.
2024-08-05 10:37:03.300 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 10:37:03.301 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 10:37:03.305 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 28.8255ms
2024-08-05 10:37:03.309 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 10:37:03.310 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 129.5343ms
2024-08-05 10:38:08.428 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 10:38:08.438 +07:00 [INF] CORS policy execution successful.
2024-08-05 10:38:08.438 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 10:38:08.439 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 10:38:08.440 +07:00 [INF] Fetching all products from the database.
2024-08-05 10:38:08.442 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 10:38:08.444 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 10:38:08.464 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 10:38:08.465 +07:00 [INF] CORS policy execution successful.
2024-08-05 10:38:08.465 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 10:38:08.465 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 10:38:08.466 +07:00 [INF] Fetching all products from the database.
2024-08-05 10:38:08.467 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 10:38:08.470 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 10:38:08.485 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 45.5092ms
2024-08-05 10:38:08.492 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 10:38:08.493 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 64.7124ms
2024-08-05 10:38:08.494 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 27.5289ms
2024-08-05 10:38:08.499 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 10:38:08.500 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 36.2132ms
2024-08-05 10:38:33.983 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 10:38:33.986 +07:00 [INF] CORS policy execution successful.
2024-08-05 10:38:33.987 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 10:38:33.987 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 10:38:33.988 +07:00 [INF] Fetching all products from the database.
2024-08-05 10:38:33.989 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 10:38:33.992 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 10:38:33.993 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 4.9779ms
2024-08-05 10:38:33.994 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 10:38:33.994 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 11.6893ms
2024-08-05 10:38:33.999 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 10:38:33.999 +07:00 [INF] CORS policy execution successful.
2024-08-05 10:38:34.000 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 10:38:34.000 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 10:38:34.001 +07:00 [INF] Fetching all products from the database.
2024-08-05 10:38:34.002 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 10:38:34.003 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 10:38:34.005 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.466ms
2024-08-05 10:38:34.005 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 10:38:34.006 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 7.1610ms
2024-08-05 10:55:02.991 +07:00 [INF] Application Starting
2024-08-05 10:55:03.604 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 10:55:03.705 +07:00 [INF] Saved 7 entities to in-memory store.
2024-08-05 10:55:03.714 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 10:55:03.857 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 10:55:03.858 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 10:55:03.859 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 10:55:03.860 +07:00 [INF] Hosting environment: Development
2024-08-05 10:55:03.860 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 10:55:04.379 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 10:55:04.658 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 284.5370ms
2024-08-05 10:55:04.660 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 10:55:04.660 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 10:55:04.671 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 11.6406ms
2024-08-05 10:55:04.725 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 65.2218ms
2024-08-05 10:55:04.758 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 10:55:04.842 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 84.5484ms
2024-08-05 11:03:50.371 +07:00 [INF] Application Starting
2024-08-05 11:03:51.085 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:03:51.160 +07:00 [INF] Saved 7 entities to in-memory store.
2024-08-05 11:03:51.169 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 11:03:51.296 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 11:03:51.297 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 11:03:51.298 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 11:03:51.298 +07:00 [INF] Hosting environment: Development
2024-08-05 11:03:51.299 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 11:03:51.871 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 11:03:52.110 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 242.5062ms
2024-08-05 11:03:52.113 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 11:03:52.115 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 11:03:52.122 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 7.8803ms
2024-08-05 11:03:52.161 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 48.3177ms
2024-08-05 11:03:52.192 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 11:03:52.275 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 82.5286ms
2024-08-05 11:06:44.752 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Users - -
2024-08-05 11:06:44.882 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:06:44.884 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Users - - - 204 - - 131.6895ms
2024-08-05 11:06:44.888 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Users application/json 72
2024-08-05 11:06:44.939 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:06:44.944 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 11:06:44.973 +07:00 [INF] Route matched with {action = "PostUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] PostUser(webapi_shopping_interview.Model.User) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:06:45.078 +07:00 [INF] Creating a new user.
2024-08-05 11:06:45.087 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:06:45.491 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:06:45.499 +07:00 [INF] User with ID: 1 created successfully.
2024-08-05 11:06:45.507 +07:00 [INF] Executing CreatedAtActionResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 11:06:45.544 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview) in 564.485ms
2024-08-05 11:06:45.547 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 11:06:45.550 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Users application/json 72 - 201 - application/json;+charset=utf-8 662.0099ms
2024-08-05 11:06:53.555 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users - -
2024-08-05 11:06:53.557 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:06:53.558 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview)'
2024-08-05 11:06:53.564 +07:00 [INF] Route matched with {action = "GetUsers", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.User]]] GetUsers() on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:06:53.568 +07:00 [INF] Fetching all users.
2024-08-05 11:06:53.591 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:06:53.604 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.User, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:06:53.606 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview) in 39.9613ms
2024-08-05 11:06:53.607 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview)'
2024-08-05 11:06:53.607 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users - - - 200 - application/json;+charset=utf-8 52.2115ms
2024-08-05 11:06:53.778 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:06:53.779 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:06:53.779 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:06:53.782 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:06:53.784 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:06:53.785 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:06:53.792 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:06:53.806 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 22.6005ms
2024-08-05 11:06:53.806 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:06:53.807 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:06:53.807 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 29.4569ms
2024-08-05 11:06:53.808 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:06:53.808 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:06:53.809 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:06:53.810 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:06:53.811 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:06:53.812 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:06:53.813 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.2061ms
2024-08-05 11:06:53.814 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:06:53.814 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 7.4682ms
2024-08-05 11:07:25.201 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Orders - -
2024-08-05 11:07:25.235 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:07:25.235 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Orders - - - 204 - - 34.5919ms
2024-08-05 11:07:25.241 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Orders application/json 517
2024-08-05 11:07:25.243 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:07:25.243 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.PostOrder (webapi-shopping-interview)'
2024-08-05 11:07:25.249 +07:00 [INF] Route matched with {action = "PostOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] PostOrder(webapi_shopping_interview.Model.Order) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:07:25.277 +07:00 [INF] Creating a new order.
2024-08-05 11:07:25.278 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:07:25.320 +07:00 [INF] Saved 7 entities to in-memory store.
2024-08-05 11:07:25.322 +07:00 [INF] Order with ID: 1 created successfully.
2024-08-05 11:07:25.323 +07:00 [INF] Executing CreatedAtActionResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 11:07:25.324 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.PostOrder (webapi-shopping-interview) in 74.1156ms
2024-08-05 11:07:25.325 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.PostOrder (webapi-shopping-interview)'
2024-08-05 11:07:25.326 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Orders application/json 517 - 201 - application/json;+charset=utf-8 85.0229ms
2024-08-05 11:07:25.329 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/1 - -
2024-08-05 11:07:25.329 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:07:25.330 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/1 - - - 204 - - 0.7579ms
2024-08-05 11:07:25.331 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/1 multipart/form-data;+boundary=----WebKitFormBoundaryvj6ARfebHRYoGaql 138
2024-08-05 11:07:25.331 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:07:25.331 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:07:25.336 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:07:25.350 +07:00 [INF] Updating stock for product with id 1.
2024-08-05 11:07:25.351 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:07:25.401 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:07:25.403 +07:00 [INF] Stock for product with id 1 updated.
2024-08-05 11:07:25.403 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:07:25.404 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 66.8714ms
2024-08-05 11:07:25.405 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:07:25.405 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/1 multipart/form-data;+boundary=----WebKitFormBoundaryvj6ARfebHRYoGaql 138 - 204 - - 74.8919ms
2024-08-05 11:07:25.408 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/2 - -
2024-08-05 11:07:25.408 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:07:25.409 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/2 - - - 204 - - 0.9067ms
2024-08-05 11:07:25.409 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/2 multipart/form-data;+boundary=----WebKitFormBoundary9Q3M7oQgE0KUNuXs 138
2024-08-05 11:07:25.410 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:07:25.410 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:07:25.410 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:07:25.412 +07:00 [INF] Updating stock for product with id 2.
2024-08-05 11:07:25.413 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:07:25.416 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:07:25.416 +07:00 [INF] Stock for product with id 2 updated.
2024-08-05 11:07:25.417 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:07:25.417 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 5.134ms
2024-08-05 11:07:25.417 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:07:25.418 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/2 multipart/form-data;+boundary=----WebKitFormBoundary9Q3M7oQgE0KUNuXs 138 - 204 - - 8.3716ms
2024-08-05 11:07:25.420 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/3 - -
2024-08-05 11:07:25.420 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:07:25.421 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/3 - - - 204 - - 0.7434ms
2024-08-05 11:07:25.421 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/3 multipart/form-data;+boundary=----WebKitFormBoundaryOmaZksBjtludCYoc 138
2024-08-05 11:07:25.422 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:07:25.422 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:07:25.422 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:07:25.423 +07:00 [INF] Updating stock for product with id 3.
2024-08-05 11:07:25.424 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:07:25.427 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:07:25.427 +07:00 [INF] Stock for product with id 3 updated.
2024-08-05 11:07:25.428 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:07:25.428 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 5.0168ms
2024-08-05 11:07:25.429 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:07:25.429 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/3 multipart/form-data;+boundary=----WebKitFormBoundaryOmaZksBjtludCYoc 138 - 204 - - 7.8739ms
2024-08-05 11:07:25.431 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/4 - -
2024-08-05 11:07:25.432 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:07:25.433 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/4 - - - 204 - - 1.4972ms
2024-08-05 11:07:25.433 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/4 multipart/form-data;+boundary=----WebKitFormBoundaryqA1nx8j1Fbfxxdt9 138
2024-08-05 11:07:25.434 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:07:25.434 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:07:25.434 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:07:25.435 +07:00 [INF] Updating stock for product with id 4.
2024-08-05 11:07:25.436 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:07:25.437 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:07:25.437 +07:00 [INF] Stock for product with id 4 updated.
2024-08-05 11:07:25.438 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:07:25.438 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 2.8218ms
2024-08-05 11:07:25.438 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:07:25.440 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/4 multipart/form-data;+boundary=----WebKitFormBoundaryqA1nx8j1Fbfxxdt9 138 - 204 - - 7.0445ms
2024-08-05 11:07:25.442 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/5 - -
2024-08-05 11:07:25.442 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:07:25.443 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/5 - - - 204 - - 0.7604ms
2024-08-05 11:07:25.444 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/5 multipart/form-data;+boundary=----WebKitFormBoundaryDhJffedVJeAd2s5B 138
2024-08-05 11:07:25.444 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:07:25.444 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:07:25.445 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:07:25.445 +07:00 [INF] Updating stock for product with id 5.
2024-08-05 11:07:25.446 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:07:25.448 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:07:25.448 +07:00 [INF] Stock for product with id 5 updated.
2024-08-05 11:07:25.448 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:07:25.449 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 3.4248ms
2024-08-05 11:07:25.449 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:07:25.450 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/5 multipart/form-data;+boundary=----WebKitFormBoundaryDhJffedVJeAd2s5B 138 - 204 - - 6.0449ms
2024-08-05 11:07:25.451 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/6 - -
2024-08-05 11:07:25.451 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:07:25.452 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/6 - - - 204 - - 0.7119ms
2024-08-05 11:07:25.452 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/6 multipart/form-data;+boundary=----WebKitFormBoundaryQva5G4BtdgXbrMAA 138
2024-08-05 11:07:25.454 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:07:25.454 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:07:25.455 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:07:25.456 +07:00 [INF] Updating stock for product with id 6.
2024-08-05 11:07:25.456 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:07:25.457 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:07:25.458 +07:00 [INF] Stock for product with id 6 updated.
2024-08-05 11:07:25.458 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:07:25.459 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 3.1534ms
2024-08-05 11:07:25.459 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:07:25.463 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/6 multipart/form-data;+boundary=----WebKitFormBoundaryQva5G4BtdgXbrMAA 138 - 204 - - 10.6475ms
2024-08-05 11:07:25.465 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:07:25.465 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:07:25.465 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:07:25.466 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:07:25.467 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:07:25.468 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:07:25.468 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:07:25.475 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 8.6431ms
2024-08-05 11:07:25.476 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:07:25.477 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 11.9809ms
2024-08-05 11:08:15.310 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:08:15.315 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:08:15.317 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:08:15.317 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:08:15.318 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:08:15.317 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:08:15.319 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:08:15.320 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:08:15.320 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:08:15.321 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:08:15.322 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:08:15.324 +07:00 [INF] Fetching all orders.
2024-08-05 11:08:15.324 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:08:15.362 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:08:15.364 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:08:15.364 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:08:15.365 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:08:15.366 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:08:15.366 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:08:15.377 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:08:15.430 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 63.9902ms
2024-08-05 11:08:15.433 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:08:15.437 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 74.8524ms
2024-08-05 11:08:15.431 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 110.9883ms
2024-08-05 11:08:15.441 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:08:15.442 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 126.9154ms
2024-08-05 11:08:15.481 +07:00 [INF] Fetched 1 orders.
2024-08-05 11:08:15.482 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:08:15.483 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 160.3521ms
2024-08-05 11:08:15.490 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:08:15.491 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 180.6461ms
2024-08-05 11:08:15.490 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:08:15.496 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:08:15.497 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:08:15.497 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:08:15.498 +07:00 [INF] Fetching all orders.
2024-08-05 11:08:15.500 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:08:15.501 +07:00 [INF] Fetched 1 orders.
2024-08-05 11:08:15.501 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:08:15.502 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 3.9759ms
2024-08-05 11:08:15.502 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:08:15.503 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 12.9074ms
2024-08-05 11:08:16.798 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders/1 - -
2024-08-05 11:08:16.799 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:08:16.799 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:08:16.802 +07:00 [INF] Route matched with {action = "GetOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] GetOrder(Int32) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:08:16.805 +07:00 [INF] Fetching order with ID: 1
2024-08-05 11:08:16.805 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:08:16.821 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 11:08:16.822 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview) in 19.2437ms
2024-08-05 11:08:16.823 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:08:16.824 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders/1 - - - 200 - application/json;+charset=utf-8 26.0720ms
2024-08-05 11:08:18.757 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders/1 - -
2024-08-05 11:08:18.758 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:08:18.758 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:08:18.759 +07:00 [INF] Route matched with {action = "GetOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] GetOrder(Int32) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:08:18.760 +07:00 [INF] Fetching order with ID: 1
2024-08-05 11:08:18.761 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:08:18.762 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 11:08:18.764 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview) in 3.856ms
2024-08-05 11:08:18.765 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:08:18.765 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders/1 - - - 200 - application/json;+charset=utf-8 8.2994ms
2024-08-05 11:17:29.150 +07:00 [INF] Application Starting
2024-08-05 11:17:29.818 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:17:29.899 +07:00 [INF] Saved 7 entities to in-memory store.
2024-08-05 11:17:29.906 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 11:17:30.034 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 11:17:30.035 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 11:17:30.035 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 11:17:30.036 +07:00 [INF] Hosting environment: Development
2024-08-05 11:17:30.036 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 11:17:30.692 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 11:17:30.926 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 237.8034ms
2024-08-05 11:17:30.929 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 11:17:30.929 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 11:17:30.936 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 6.6511ms
2024-08-05 11:17:30.976 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 46.1246ms
2024-08-05 11:17:31.009 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 11:17:31.097 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 87.9343ms
2024-08-05 11:18:15.933 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 11:18:15.970 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:18:16.005 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:18:38.093 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:18:38.125 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:18:38.463 +07:00 [WRN] User with Username: audi and provided PasswordHash not found.
2024-08-05 11:18:38.473 +07:00 [INF] Executing ObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ProblemDetails'.
2024-08-05 11:18:38.660 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 22480.5926ms
2024-08-05 11:18:38.662 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:18:38.666 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 404 - application/problem+json;+charset=utf-8 22732.9151ms
2024-08-05 11:19:21.592 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 11:19:21.599 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:19:21.601 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:19:21.601 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:19:26.625 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:19:26.647 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:19:26.650 +07:00 [WRN] User with Username: audi and provided PasswordHash not found.
2024-08-05 11:19:26.651 +07:00 [INF] Executing ObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ProblemDetails'.
2024-08-05 11:19:26.652 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 5049.1711ms
2024-08-05 11:19:26.653 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:19:26.658 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 404 - application/problem+json;+charset=utf-8 5066.0962ms
2024-08-05 11:19:43.878 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Users - -
2024-08-05 11:19:43.879 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:19:43.881 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Users - - - 204 - - 2.9872ms
2024-08-05 11:19:43.884 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Users application/json 72
2024-08-05 11:19:43.885 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:19:43.885 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 11:19:43.891 +07:00 [INF] Route matched with {action = "PostUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] PostUser(webapi_shopping_interview.Model.User) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:19:43.926 +07:00 [INF] Creating a new user.
2024-08-05 11:19:43.927 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:19:43.974 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:19:43.979 +07:00 [INF] User with ID: 1 created successfully.
2024-08-05 11:19:43.980 +07:00 [INF] Executing CreatedAtActionResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 11:19:44.002 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview) in 109.9355ms
2024-08-05 11:19:44.003 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 11:19:44.004 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Users application/json 72 - 201 - application/json;+charset=utf-8 119.6133ms
2024-08-05 11:19:50.943 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 11:19:50.945 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:19:50.945 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:19:50.946 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:19:50.947 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:19:50.948 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:19:50.955 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 11:19:50.956 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 9.409ms
2024-08-05 11:19:50.957 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:19:50.958 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 14.9520ms
2024-08-05 11:19:56.950 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 11:19:56.951 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:19:56.952 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:19:56.952 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:19:56.953 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:19:56.954 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:19:56.957 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 11:19:56.957 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 4.1786ms
2024-08-05 11:19:56.958 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:19:56.959 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 8.6693ms
2024-08-05 11:19:57.793 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 11:19:57.794 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:19:57.795 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:19:57.796 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:19:57.797 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:19:57.797 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:19:57.798 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 11:19:57.799 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 2.7088ms
2024-08-05 11:19:57.800 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:19:57.801 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 7.1740ms
2024-08-05 11:19:58.862 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 11:19:58.863 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:19:58.864 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:19:58.864 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:19:58.865 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:19:58.866 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:19:58.867 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 11:19:58.868 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 2.8361ms
2024-08-05 11:19:58.869 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:19:58.869 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 7.1234ms
2024-08-05 11:24:51.038 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 11:24:51.043 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:24:51.043 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:24:51.044 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:24:51.045 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:24:51.046 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:24:51.047 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 11:24:51.048 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 2.7016ms
2024-08-05 11:24:51.048 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:24:51.051 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 12.8123ms
2024-08-05 11:25:15.798 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 11:25:15.801 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:25:15.802 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:25:15.803 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:25:15.804 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:25:15.804 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:25:15.805 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 11:25:15.806 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 2.6903ms
2024-08-05 11:25:15.807 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:25:15.809 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 11.1665ms
2024-08-05 11:25:16.040 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:25:16.042 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:25:16.043 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:25:16.046 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:25:16.048 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:25:16.049 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:25:16.061 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:25:16.090 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:25:16.091 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:25:16.091 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:25:16.092 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:25:16.093 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:25:16.094 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:25:16.102 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:25:16.116 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 23.1364ms
2024-08-05 11:25:16.116 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 69.0265ms
2024-08-05 11:25:16.127 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:25:16.127 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:25:16.132 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 91.3165ms
2024-08-05 11:25:16.132 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 41.7150ms
2024-08-05 11:25:35.788 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=12345 - -
2024-08-05 11:25:35.791 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:25:35.791 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:25:35.792 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:25:35.793 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:25:35.793 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:25:35.794 +07:00 [WRN] User with Username: audi and provided PasswordHash not found.
2024-08-05 11:25:35.795 +07:00 [INF] Executing ObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ProblemDetails'.
2024-08-05 11:25:35.795 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 2.9413ms
2024-08-05 11:25:35.797 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:25:35.799 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=12345 - - - 404 - application/problem+json;+charset=utf-8 11.3592ms
2024-08-05 11:25:38.858 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 11:25:38.859 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:25:38.860 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:25:38.861 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:25:38.862 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:25:38.862 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:25:38.863 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 11:25:38.864 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 2.5574ms
2024-08-05 11:25:38.865 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:25:38.865 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 6.9116ms
2024-08-05 11:25:38.884 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:25:38.885 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:25:38.885 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:25:38.886 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:25:38.887 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:25:38.887 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:25:38.889 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:25:38.890 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.2579ms
2024-08-05 11:25:38.891 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:25:38.892 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:25:38.893 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 8.6845ms
2024-08-05 11:25:38.893 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:25:38.894 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:25:38.896 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:25:38.897 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:25:38.898 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:25:38.899 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:25:38.900 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 2.8847ms
2024-08-05 11:25:38.901 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:25:38.902 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 9.2689ms
2024-08-05 11:37:14.902 +07:00 [INF] Application Starting
2024-08-05 11:37:15.553 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:37:15.628 +07:00 [INF] Saved 7 entities to in-memory store.
2024-08-05 11:37:15.635 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 11:37:15.769 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 11:37:15.772 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 11:37:15.772 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 11:37:15.773 +07:00 [INF] Hosting environment: Development
2024-08-05 11:37:15.773 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 11:37:16.389 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 11:37:16.634 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 248.7673ms
2024-08-05 11:37:16.637 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 11:37:16.637 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 11:37:16.644 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 6.8101ms
2024-08-05 11:37:16.679 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 42.5162ms
2024-08-05 11:37:16.710 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 11:37:16.787 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 77.3919ms
2024-08-05 11:37:36.017 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 11:37:36.051 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:37:36.058 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:37:36.093 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:37:36.128 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:37:36.137 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:37:36.489 +07:00 [WRN] User with Username: audi and provided PasswordHash not found.
2024-08-05 11:37:36.500 +07:00 [INF] Executing ObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ProblemDetails'.
2024-08-05 11:37:36.529 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 429.8016ms
2024-08-05 11:37:36.533 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:37:36.537 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 404 - application/problem+json;+charset=utf-8 519.5934ms
2024-08-05 11:37:46.096 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Users - -
2024-08-05 11:37:46.098 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:37:46.100 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Users - - - 204 - - 3.9233ms
2024-08-05 11:37:46.101 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Users application/json 72
2024-08-05 11:37:46.102 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:37:46.102 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 11:37:46.108 +07:00 [INF] Route matched with {action = "PostUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] PostUser(webapi_shopping_interview.Model.User) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:37:46.153 +07:00 [INF] Creating a new user.
2024-08-05 11:37:46.171 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:37:46.230 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:37:46.240 +07:00 [INF] User with ID: 1 created successfully.
2024-08-05 11:37:46.241 +07:00 [INF] Executing CreatedAtActionResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 11:37:46.270 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview) in 161.6246ms
2024-08-05 11:37:46.280 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 11:37:46.281 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Users application/json 72 - 201 - application/json;+charset=utf-8 180.0275ms
2024-08-05 11:37:56.120 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 11:37:56.121 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:37:56.122 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:37:56.123 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:37:56.124 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:37:56.124 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:37:56.136 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 11:37:56.137 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 13.261ms
2024-08-05 11:37:56.137 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:37:56.139 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 18.1154ms
2024-08-05 11:37:56.360 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:37:56.362 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:37:56.362 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:37:56.366 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:37:56.368 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:37:56.368 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:37:56.380 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:37:56.397 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:37:56.398 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:37:56.399 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:37:56.399 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:37:56.401 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:37:56.402 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:37:56.402 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 35.4189ms
2024-08-05 11:37:56.403 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:37:56.404 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:37:56.405 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.6757ms
2024-08-05 11:37:56.405 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 44.8701ms
2024-08-05 11:37:56.405 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:37:56.406 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 9.1023ms
2024-08-05 11:38:13.545 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Orders - -
2024-08-05 11:38:13.546 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:13.548 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Orders - - - 204 - - 2.6154ms
2024-08-05 11:38:13.551 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Orders application/json 517
2024-08-05 11:38:13.552 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:13.552 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.PostOrder (webapi-shopping-interview)'
2024-08-05 11:38:13.556 +07:00 [INF] Route matched with {action = "PostOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] PostOrder(webapi_shopping_interview.Model.Order) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:38:13.588 +07:00 [INF] Creating a new order.
2024-08-05 11:38:13.589 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:13.625 +07:00 [INF] Saved 7 entities to in-memory store.
2024-08-05 11:38:13.628 +07:00 [INF] Order with ID: 1 created successfully.
2024-08-05 11:38:13.628 +07:00 [INF] Executing CreatedAtActionResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 11:38:13.631 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.PostOrder (webapi-shopping-interview) in 73.258ms
2024-08-05 11:38:13.631 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.PostOrder (webapi-shopping-interview)'
2024-08-05 11:38:13.632 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Orders application/json 517 - 201 - application/json;+charset=utf-8 80.6136ms
2024-08-05 11:38:13.637 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/1 - -
2024-08-05 11:38:13.645 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:13.646 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/1 - - - 204 - - 8.7070ms
2024-08-05 11:38:13.647 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/1 multipart/form-data;+boundary=----WebKitFormBoundarykdH0XCxLzoPBvket 138
2024-08-05 11:38:13.648 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:13.648 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:38:13.651 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:38:13.666 +07:00 [INF] Updating stock for product with id 1.
2024-08-05 11:38:13.667 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:13.701 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:38:13.703 +07:00 [INF] Stock for product with id 1 updated.
2024-08-05 11:38:13.704 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:38:13.704 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 52.1991ms
2024-08-05 11:38:13.705 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:38:13.705 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/1 multipart/form-data;+boundary=----WebKitFormBoundarykdH0XCxLzoPBvket 138 - 204 - - 58.5521ms
2024-08-05 11:38:13.707 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/2 - -
2024-08-05 11:38:13.708 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:13.708 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/2 - - - 204 - - 1.0699ms
2024-08-05 11:38:13.710 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/2 multipart/form-data;+boundary=----WebKitFormBoundaryITbRMSwo24Daaf24 138
2024-08-05 11:38:13.710 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:13.711 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:38:13.711 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:38:13.712 +07:00 [INF] Updating stock for product with id 2.
2024-08-05 11:38:13.713 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:13.714 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:38:13.714 +07:00 [INF] Stock for product with id 2 updated.
2024-08-05 11:38:13.715 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:38:13.715 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 3.3405ms
2024-08-05 11:38:13.715 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:38:13.716 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/2 multipart/form-data;+boundary=----WebKitFormBoundaryITbRMSwo24Daaf24 138 - 204 - - 6.3868ms
2024-08-05 11:38:13.719 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/3 - -
2024-08-05 11:38:13.719 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:13.719 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/3 - - - 204 - - 1.0931ms
2024-08-05 11:38:13.720 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/3 multipart/form-data;+boundary=----WebKitFormBoundaryTqlna3L9GGek35XY 138
2024-08-05 11:38:13.721 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:13.721 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:38:13.721 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:38:13.722 +07:00 [INF] Updating stock for product with id 3.
2024-08-05 11:38:13.723 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:13.724 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:38:13.725 +07:00 [INF] Stock for product with id 3 updated.
2024-08-05 11:38:13.725 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:38:13.725 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 3.392ms
2024-08-05 11:38:13.726 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:38:13.726 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/3 multipart/form-data;+boundary=----WebKitFormBoundaryTqlna3L9GGek35XY 138 - 204 - - 6.2203ms
2024-08-05 11:38:13.728 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/4 - -
2024-08-05 11:38:13.729 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:13.729 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/4 - - - 204 - - 0.8449ms
2024-08-05 11:38:13.732 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/4 multipart/form-data;+boundary=----WebKitFormBoundaryoYMxeyKmtgfe72h3 138
2024-08-05 11:38:13.733 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:13.733 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:38:13.734 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:38:13.734 +07:00 [INF] Updating stock for product with id 4.
2024-08-05 11:38:13.735 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:13.736 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:38:13.738 +07:00 [INF] Stock for product with id 4 updated.
2024-08-05 11:38:13.738 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:38:13.738 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 4.0221ms
2024-08-05 11:38:13.739 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:38:13.739 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/4 multipart/form-data;+boundary=----WebKitFormBoundaryoYMxeyKmtgfe72h3 138 - 204 - - 7.3649ms
2024-08-05 11:38:13.741 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/5 - -
2024-08-05 11:38:13.742 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:13.742 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/5 - - - 204 - - 0.8125ms
2024-08-05 11:38:13.743 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/5 multipart/form-data;+boundary=----WebKitFormBoundarywA6zjGUqiAafAvXS 138
2024-08-05 11:38:13.743 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:13.744 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:38:13.744 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:38:13.745 +07:00 [INF] Updating stock for product with id 5.
2024-08-05 11:38:13.746 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:13.747 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:38:13.748 +07:00 [INF] Stock for product with id 5 updated.
2024-08-05 11:38:13.748 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:38:13.748 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 3.1977ms
2024-08-05 11:38:13.749 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:38:13.749 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/5 multipart/form-data;+boundary=----WebKitFormBoundarywA6zjGUqiAafAvXS 138 - 204 - - 6.3237ms
2024-08-05 11:38:13.751 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/6 - -
2024-08-05 11:38:13.752 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:13.752 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/6 - - - 204 - - 0.8477ms
2024-08-05 11:38:13.753 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/6 multipart/form-data;+boundary=----WebKitFormBoundaryu8uzR9QlTbS7D0Eb 138
2024-08-05 11:38:13.753 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:13.754 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:38:13.754 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:38:13.755 +07:00 [INF] Updating stock for product with id 6.
2024-08-05 11:38:13.755 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:13.757 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:38:13.757 +07:00 [INF] Stock for product with id 6 updated.
2024-08-05 11:38:13.757 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:38:13.758 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 3.1031ms
2024-08-05 11:38:13.758 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:38:13.759 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/6 multipart/form-data;+boundary=----WebKitFormBoundaryu8uzR9QlTbS7D0Eb 138 - 204 - - 5.8238ms
2024-08-05 11:38:13.761 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:38:13.761 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:13.762 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:38:13.762 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:38:13.763 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:38:13.763 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:13.764 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:38:13.779 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 16.1606ms
2024-08-05 11:38:13.787 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:38:13.790 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 29.5036ms
2024-08-05 11:38:17.052 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:38:17.053 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:38:17.054 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:17.055 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:17.055 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:38:17.055 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:38:17.056 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:38:17.058 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:38:17.059 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:38:17.059 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:17.060 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:38:17.060 +07:00 [INF] Fetching all orders.
2024-08-05 11:38:17.061 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:17.069 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 11.5173ms
2024-08-05 11:38:17.073 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:38:17.074 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 20.6111ms
2024-08-05 11:38:17.073 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:38:17.075 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:17.075 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:38:17.075 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:38:17.076 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:38:17.077 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:17.078 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:38:17.084 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 7.8651ms
2024-08-05 11:38:17.088 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:38:17.089 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 16.2093ms
2024-08-05 11:38:17.176 +07:00 [INF] Fetched 1 orders.
2024-08-05 11:38:17.183 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:38:17.184 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 124.3378ms
2024-08-05 11:38:17.185 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:38:17.185 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:17.186 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:38:17.186 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:38:17.187 +07:00 [INF] Fetching all orders.
2024-08-05 11:38:17.187 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:17.189 +07:00 [INF] Fetched 1 orders.
2024-08-05 11:38:17.190 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:38:17.190 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 3.3373ms
2024-08-05 11:38:17.191 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:38:17.191 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 6.3333ms
2024-08-05 11:38:17.185 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:38:17.192 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 139.5951ms
2024-08-05 11:38:19.981 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders/1 - -
2024-08-05 11:38:19.981 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:19.982 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:38:19.985 +07:00 [INF] Route matched with {action = "GetOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] GetOrder(Int32) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:38:19.987 +07:00 [INF] Fetching order with ID: 1
2024-08-05 11:38:19.988 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:20.006 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 11:38:20.007 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview) in 20.832ms
2024-08-05 11:38:20.008 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:38:20.009 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders/1 - - - 200 - application/json;+charset=utf-8 28.0140ms
2024-08-05 11:38:26.226 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders/1 - -
2024-08-05 11:38:26.227 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:26.227 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:38:26.228 +07:00 [INF] Route matched with {action = "GetOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] GetOrder(Int32) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:38:26.230 +07:00 [INF] Fetching order with ID: 1
2024-08-05 11:38:26.230 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:26.232 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 11:38:26.233 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview) in 3.4074ms
2024-08-05 11:38:26.234 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:38:26.234 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders/1 - - - 200 - application/json;+charset=utf-8 8.1345ms
2024-08-05 11:38:29.292 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders/1 - -
2024-08-05 11:38:29.293 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:29.294 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:38:29.294 +07:00 [INF] Route matched with {action = "GetOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] GetOrder(Int32) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:38:29.295 +07:00 [INF] Fetching order with ID: 1
2024-08-05 11:38:29.296 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:29.297 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 11:38:29.298 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview) in 2.9503ms
2024-08-05 11:38:29.299 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:38:29.299 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders/1 - - - 200 - application/json;+charset=utf-8 7.3353ms
2024-08-05 11:38:57.366 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:38:57.375 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:57.375 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:38:57.375 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:38:57.375 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:57.376 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:38:57.377 +07:00 [INF] Fetching all orders.
2024-08-05 11:38:57.377 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:57.379 +07:00 [INF] Fetched 1 orders.
2024-08-05 11:38:57.379 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:38:57.379 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 2.5878ms
2024-08-05 11:38:57.380 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:38:57.380 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 14.4083ms
2024-08-05 11:38:57.376 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:38:57.382 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:38:57.384 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:38:57.385 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:38:57.385 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:57.386 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:57.386 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:38:57.387 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:38:57.387 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:38:57.389 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.5556ms
2024-08-05 11:38:57.389 +07:00 [INF] Fetching all orders.
2024-08-05 11:38:57.390 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:38:57.390 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:38:57.390 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:57.391 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:38:57.391 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 16.1960ms
2024-08-05 11:38:57.392 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:38:57.392 +07:00 [INF] Fetched 1 orders.
2024-08-05 11:38:57.393 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:38:57.393 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:38:57.394 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:38:57.395 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 6.059ms
2024-08-05 11:38:57.395 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:38:57.396 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:38:57.397 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:38:57.397 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 12.9783ms
2024-08-05 11:38:57.398 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 4.1273ms
2024-08-05 11:38:57.399 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:38:57.400 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 10.3347ms
2024-08-05 11:39:06.232 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 11:39:06.232 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:06.232 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:39:06.233 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:39:06.234 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:39:06.235 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:06.236 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 11:39:06.236 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 2.5768ms
2024-08-05 11:39:06.238 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:39:06.238 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 6.7319ms
2024-08-05 11:39:06.441 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:06.442 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:06.442 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:06.443 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:06.444 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:06.444 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:06.446 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:06.447 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.0417ms
2024-08-05 11:39:06.448 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:06.448 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:06.448 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 7.8125ms
2024-08-05 11:39:06.449 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:06.450 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:06.450 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:06.451 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:06.452 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:06.453 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:06.454 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.3374ms
2024-08-05 11:39:06.455 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:06.456 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 7.2815ms
2024-08-05 11:39:08.996 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:39:08.996 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:08.997 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:08.997 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:08.997 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:08.998 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:39:08.999 +07:00 [INF] Fetching all orders.
2024-08-05 11:39:08.998 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:09.000 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:09.000 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:09.002 +07:00 [INF] Fetched 1 orders.
2024-08-05 11:39:09.002 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:09.002 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:09.003 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:09.003 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 3.9025ms
2024-08-05 11:39:09.004 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:09.008 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:39:09.010 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:09.011 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:09.009 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:09.017 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:09.015 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:39:09.012 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 10.4797ms
2024-08-05 11:39:09.018 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 21.8620ms
2024-08-05 11:39:09.018 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:09.019 +07:00 [INF] Fetching all orders.
2024-08-05 11:39:09.019 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:09.021 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:09.021 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:09.022 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 24.9078ms
2024-08-05 11:39:09.022 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:09.023 +07:00 [INF] Fetched 1 orders.
2024-08-05 11:39:09.024 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:09.024 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:09.025 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:09.025 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 6.6634ms
2024-08-05 11:39:09.026 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:09.027 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:09.038 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 30.2922ms
2024-08-05 11:39:09.039 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 14.7802ms
2024-08-05 11:39:09.040 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:09.040 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 23.4561ms
2024-08-05 11:39:14.274 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 11:39:14.277 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:14.278 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:39:14.278 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:39:14.280 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:39:14.281 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:14.282 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 11:39:14.282 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 2.5789ms
2024-08-05 11:39:14.284 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:39:14.284 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 10.3159ms
2024-08-05 11:39:14.302 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:14.303 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:14.303 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:14.304 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:14.305 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:14.305 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:14.306 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:14.312 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 7.3232ms
2024-08-05 11:39:14.312 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:14.314 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:14.314 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:14.314 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:14.315 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:14.316 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:14.317 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:14.313 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:14.324 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 21.9434ms
2024-08-05 11:39:14.331 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 15.6354ms
2024-08-05 11:39:14.332 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:14.333 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 20.1707ms
2024-08-05 11:39:33.805 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Orders - -
2024-08-05 11:39:33.805 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:33.806 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Orders - - - 204 - - 1.6493ms
2024-08-05 11:39:33.810 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Orders application/json 317
2024-08-05 11:39:33.812 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:33.812 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.PostOrder (webapi-shopping-interview)'
2024-08-05 11:39:33.813 +07:00 [INF] Route matched with {action = "PostOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] PostOrder(webapi_shopping_interview.Model.Order) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:39:33.816 +07:00 [INF] Creating a new order.
2024-08-05 11:39:33.817 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:33.820 +07:00 [INF] Saved 4 entities to in-memory store.
2024-08-05 11:39:33.820 +07:00 [INF] Order with ID: 2 created successfully.
2024-08-05 11:39:33.821 +07:00 [INF] Executing CreatedAtActionResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 11:39:33.822 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.PostOrder (webapi-shopping-interview) in 6.61ms
2024-08-05 11:39:33.823 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.PostOrder (webapi-shopping-interview)'
2024-08-05 11:39:33.824 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Orders application/json 317 - 201 - application/json;+charset=utf-8 13.3296ms
2024-08-05 11:39:33.826 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/1 - -
2024-08-05 11:39:33.826 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:33.827 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/1 - - - 204 - - 1.0187ms
2024-08-05 11:39:33.829 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/1 multipart/form-data;+boundary=----WebKitFormBoundarynZxYzM1MBHGeq2Cb 137
2024-08-05 11:39:33.830 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:33.830 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:39:33.831 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:33.832 +07:00 [INF] Updating stock for product with id 1.
2024-08-05 11:39:33.833 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:33.834 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:39:33.835 +07:00 [INF] Stock for product with id 1 updated.
2024-08-05 11:39:33.835 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:39:33.836 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 4.576ms
2024-08-05 11:39:33.837 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:39:33.838 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/1 multipart/form-data;+boundary=----WebKitFormBoundarynZxYzM1MBHGeq2Cb 137 - 204 - - 8.4492ms
2024-08-05 11:39:33.840 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/2 - -
2024-08-05 11:39:33.840 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:33.841 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/2 - - - 204 - - 1.1391ms
2024-08-05 11:39:33.841 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/2 multipart/form-data;+boundary=----WebKitFormBoundaryJdAfuYjAdG2RDk2p 137
2024-08-05 11:39:33.842 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:33.843 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:39:33.843 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:33.844 +07:00 [INF] Updating stock for product with id 2.
2024-08-05 11:39:33.845 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:33.847 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:39:33.847 +07:00 [INF] Stock for product with id 2 updated.
2024-08-05 11:39:33.847 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:39:33.848 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 3.825ms
2024-08-05 11:39:33.849 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:39:33.849 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/2 multipart/form-data;+boundary=----WebKitFormBoundaryJdAfuYjAdG2RDk2p 137 - 204 - - 8.1225ms
2024-08-05 11:39:33.852 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/3 - -
2024-08-05 11:39:33.852 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:33.853 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/3 - - - 204 - - 1.1105ms
2024-08-05 11:39:33.853 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/3 multipart/form-data;+boundary=----WebKitFormBoundaryjbuK2shxeJ0OUBCB 137
2024-08-05 11:39:33.854 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:33.854 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:39:33.855 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:33.857 +07:00 [INF] Updating stock for product with id 3.
2024-08-05 11:39:33.861 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:33.865 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:39:33.865 +07:00 [INF] Stock for product with id 3 updated.
2024-08-05 11:39:33.866 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:39:33.866 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 10.8668ms
2024-08-05 11:39:33.867 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:39:33.868 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/3 multipart/form-data;+boundary=----WebKitFormBoundaryjbuK2shxeJ0OUBCB 137 - 204 - - 14.7815ms
2024-08-05 11:39:33.871 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:33.872 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:33.872 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:33.873 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:33.874 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:33.875 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:33.877 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:33.881 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 6.5259ms
2024-08-05 11:39:33.885 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:33.887 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 14.7819ms
2024-08-05 11:39:38.431 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:39:38.433 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:38.433 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:38.433 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:38.433 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:38.434 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:38.434 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:38.435 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:39:38.436 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:38.436 +07:00 [INF] Fetching all orders.
2024-08-05 11:39:38.437 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:38.437 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:38.438 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:38.439 +07:00 [INF] Fetched 2 orders.
2024-08-05 11:39:38.440 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:38.443 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 6.3181ms
2024-08-05 11:39:38.443 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 7.1748ms
2024-08-05 11:39:38.444 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:38.444 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:38.444 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:38.446 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 14.2694ms
2024-08-05 11:39:38.445 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:38.445 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 12.7221ms
2024-08-05 11:39:38.445 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:39:38.447 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:38.447 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:38.448 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:38.448 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:38.449 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:38.449 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:39:38.450 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:38.451 +07:00 [INF] Fetching all orders.
2024-08-05 11:39:38.452 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:38.452 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:38.455 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 5.9178ms
2024-08-05 11:39:38.455 +07:00 [INF] Fetched 2 orders.
2024-08-05 11:39:38.456 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:38.456 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:38.457 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 12.9660ms
2024-08-05 11:39:38.457 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 6.5748ms
2024-08-05 11:39:38.458 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:38.459 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 14.3026ms
2024-08-05 11:39:39.328 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders/1 - -
2024-08-05 11:39:39.328 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:39.329 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:39:39.330 +07:00 [INF] Route matched with {action = "GetOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] GetOrder(Int32) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:39:39.331 +07:00 [INF] Fetching order with ID: 1
2024-08-05 11:39:39.332 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:39.333 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 11:39:39.334 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview) in 2.8582ms
2024-08-05 11:39:39.335 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:39:39.336 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders/1 - - - 200 - application/json;+charset=utf-8 8.1979ms
2024-08-05 11:39:39.857 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders/2 - -
2024-08-05 11:39:39.857 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:39.858 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:39:39.859 +07:00 [INF] Route matched with {action = "GetOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] GetOrder(Int32) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:39:39.860 +07:00 [INF] Fetching order with ID: 2
2024-08-05 11:39:39.861 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:39.862 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 11:39:39.863 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview) in 2.963ms
2024-08-05 11:39:39.863 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:39:39.864 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders/2 - - - 200 - application/json;+charset=utf-8 7.0125ms
2024-08-05 11:39:45.583 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 11:39:45.585 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:45.585 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:39:45.586 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:39:45.587 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:39:45.587 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:45.589 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 11:39:45.589 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 2.5875ms
2024-08-05 11:39:45.590 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:39:45.591 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 7.7456ms
2024-08-05 11:39:45.650 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:45.652 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:45.653 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:45.654 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:45.655 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:45.655 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:45.656 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:45.658 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.3022ms
2024-08-05 11:39:45.659 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:45.661 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:45.661 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:45.662 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:45.663 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:45.663 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:45.664 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:45.666 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.7177ms
2024-08-05 11:39:45.668 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:45.668 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 8.9586ms
2024-08-05 11:39:45.661 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:45.669 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 18.9119ms
2024-08-05 11:39:50.405 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:50.405 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:39:50.407 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:50.407 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:50.408 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:39:50.408 +07:00 [INF] Fetching all orders.
2024-08-05 11:39:50.409 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:50.410 +07:00 [INF] Fetched 2 orders.
2024-08-05 11:39:50.411 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:50.412 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 4.1492ms
2024-08-05 11:39:50.415 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:50.415 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 10.1428ms
2024-08-05 11:39:50.406 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:50.416 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:50.416 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:50.417 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:50.418 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:50.419 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:50.421 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:39:50.422 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:50.423 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:50.423 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:39:50.424 +07:00 [INF] Fetching all orders.
2024-08-05 11:39:50.423 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:50.422 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 4.6926ms
2024-08-05 11:39:50.427 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:50.427 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 22.3269ms
2024-08-05 11:39:50.426 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:50.429 +07:00 [INF] Fetched 2 orders.
2024-08-05 11:39:50.429 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:50.430 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 5.6401ms
2024-08-05 11:39:50.430 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:50.431 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 9.2399ms
2024-08-05 11:39:50.426 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:50.432 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:50.433 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:50.434 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:50.434 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:50.435 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:50.437 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.4776ms
2024-08-05 11:39:50.438 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:50.439 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 16.5978ms
2024-08-05 11:39:51.790 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders/1 - -
2024-08-05 11:39:51.791 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:51.792 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:39:51.793 +07:00 [INF] Route matched with {action = "GetOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] GetOrder(Int32) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:39:51.794 +07:00 [INF] Fetching order with ID: 1
2024-08-05 11:39:51.794 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:51.796 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 11:39:51.797 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview) in 2.9296ms
2024-08-05 11:39:51.798 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:39:51.798 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders/1 - - - 200 - application/json;+charset=utf-8 8.4532ms
2024-08-05 11:39:51.803 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders/2 - -
2024-08-05 11:39:51.803 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:51.804 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:39:51.804 +07:00 [INF] Route matched with {action = "GetOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] GetOrder(Int32) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:39:51.806 +07:00 [INF] Fetching order with ID: 2
2024-08-05 11:39:51.806 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:51.808 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 11:39:51.808 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview) in 2.9273ms
2024-08-05 11:39:51.809 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:39:51.810 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders/2 - - - 200 - application/json;+charset=utf-8 7.0707ms
2024-08-05 11:39:55.515 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:55.515 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:55.516 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:55.517 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:55.518 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:55.519 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:55.520 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:55.524 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 6.4276ms
2024-08-05 11:39:55.525 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:55.527 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:55.527 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:55.527 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 12.8954ms
2024-08-05 11:39:55.528 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:55.529 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:55.530 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:55.531 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:55.532 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:55.533 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 2.787ms
2024-08-05 11:39:55.534 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:55.534 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 9.3844ms
2024-08-05 11:39:56.851 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:39:56.852 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:56.853 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:56.853 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:56.854 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:56.854 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:56.854 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:56.855 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:39:56.856 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:56.857 +07:00 [INF] Fetching all orders.
2024-08-05 11:39:56.857 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:56.857 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:56.858 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:56.859 +07:00 [INF] Fetched 2 orders.
2024-08-05 11:39:56.860 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:56.863 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 6.833ms
2024-08-05 11:39:56.864 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:56.864 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 13.0313ms
2024-08-05 11:39:56.863 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 7.142ms
2024-08-05 11:39:56.870 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:56.871 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 19.2525ms
2024-08-05 11:39:56.869 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:39:56.862 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:39:56.872 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:56.872 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:56.873 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:39:56.874 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:39:56.874 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:56.872 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:56.878 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:56.878 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:39:56.879 +07:00 [INF] Fetching all orders.
2024-08-05 11:39:56.879 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:56.880 +07:00 [INF] Fetched 2 orders.
2024-08-05 11:39:56.881 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:56.881 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 2.7464ms
2024-08-05 11:39:56.883 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:39:56.883 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 14.1855ms
2024-08-05 11:39:56.876 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:39:56.887 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 13.5925ms
2024-08-05 11:39:56.892 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:39:56.892 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 30.1149ms
2024-08-05 11:39:58.385 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders/1 - -
2024-08-05 11:39:58.386 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:39:58.387 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:39:58.388 +07:00 [INF] Route matched with {action = "GetOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] GetOrder(Int32) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:39:58.389 +07:00 [INF] Fetching order with ID: 1
2024-08-05 11:39:58.389 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:39:58.391 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 11:39:58.391 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview) in 2.8971ms
2024-08-05 11:39:58.392 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:39:58.393 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders/1 - - - 200 - application/json;+charset=utf-8 7.6315ms
2024-08-05 11:46:03.892 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 11:46:03.895 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:46:03.896 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:46:03.897 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 11:46:03.898 +07:00 [INF] Fetching user with Username: audi
2024-08-05 11:46:03.898 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:46:03.899 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 11:46:03.900 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 2.6998ms
2024-08-05 11:46:03.901 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 11:46:03.903 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 11.7875ms
2024-08-05 11:46:03.944 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:46:03.944 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:46:03.945 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:46:03.946 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:46:03.946 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:46:03.947 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:46:03.948 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:46:03.953 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:46:03.954 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:46:03.955 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:46:03.955 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:46:03.958 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:46:03.959 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:46:03.960 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:46:03.970 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 23.6857ms
2024-08-05 11:46:03.973 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:46:03.974 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 30.0441ms
2024-08-05 11:46:03.979 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 21.1177ms
2024-08-05 11:46:03.981 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:46:03.982 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 28.6054ms
2024-08-05 11:52:39.680 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Orders - -
2024-08-05 11:52:39.683 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:39.684 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Orders - - - 204 - - 4.2111ms
2024-08-05 11:52:39.686 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Orders application/json 316
2024-08-05 11:52:39.687 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:39.687 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.PostOrder (webapi-shopping-interview)'
2024-08-05 11:52:39.688 +07:00 [INF] Route matched with {action = "PostOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] PostOrder(webapi_shopping_interview.Model.Order) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:52:39.690 +07:00 [INF] Creating a new order.
2024-08-05 11:52:39.690 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:52:39.692 +07:00 [INF] Saved 4 entities to in-memory store.
2024-08-05 11:52:39.692 +07:00 [INF] Order with ID: 3 created successfully.
2024-08-05 11:52:39.693 +07:00 [INF] Executing CreatedAtActionResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 11:52:39.693 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.PostOrder (webapi-shopping-interview) in 4.7015ms
2024-08-05 11:52:39.694 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.PostOrder (webapi-shopping-interview)'
2024-08-05 11:52:39.695 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Orders application/json 316 - 201 - application/json;+charset=utf-8 8.2855ms
2024-08-05 11:52:39.698 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/6 - -
2024-08-05 11:52:39.700 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:39.701 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/6 - - - 204 - - 3.1976ms
2024-08-05 11:52:39.702 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/6 multipart/form-data;+boundary=----WebKitFormBoundaryk7qYN0B7xUB2Nmgw 138
2024-08-05 11:52:39.702 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:39.703 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:52:39.704 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:52:39.705 +07:00 [INF] Updating stock for product with id 6.
2024-08-05 11:52:39.706 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:52:39.707 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:52:39.708 +07:00 [INF] Stock for product with id 6 updated.
2024-08-05 11:52:39.708 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:52:39.708 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 3.2995ms
2024-08-05 11:52:39.709 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:52:39.709 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/6 multipart/form-data;+boundary=----WebKitFormBoundaryk7qYN0B7xUB2Nmgw 138 - 204 - - 7.7095ms
2024-08-05 11:52:39.713 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/5 - -
2024-08-05 11:52:39.713 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:39.714 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/5 - - - 204 - - 1.0752ms
2024-08-05 11:52:39.741 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/5 multipart/form-data;+boundary=----WebKitFormBoundary0uN4xHCJGnNBqtBo 138
2024-08-05 11:52:39.743 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:39.744 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:52:39.744 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:52:39.749 +07:00 [INF] Updating stock for product with id 5.
2024-08-05 11:52:39.750 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:52:39.751 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:52:39.752 +07:00 [INF] Stock for product with id 5 updated.
2024-08-05 11:52:39.752 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:52:39.753 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 4.0493ms
2024-08-05 11:52:39.753 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:52:39.754 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/5 multipart/form-data;+boundary=----WebKitFormBoundary0uN4xHCJGnNBqtBo 138 - 204 - - 12.9243ms
2024-08-05 11:52:39.756 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/4 - -
2024-08-05 11:52:39.757 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:39.758 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/4 - - - 204 - - 1.3361ms
2024-08-05 11:52:39.763 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/4 multipart/form-data;+boundary=----WebKitFormBoundarygfA41A9bAfDD2Rnk 140
2024-08-05 11:52:39.764 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:39.764 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:52:39.764 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:52:39.765 +07:00 [INF] Updating stock for product with id 4.
2024-08-05 11:52:39.768 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:52:39.774 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 11:52:39.775 +07:00 [INF] Stock for product with id 4 updated.
2024-08-05 11:52:39.775 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 11:52:39.775 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 10.3556ms
2024-08-05 11:52:39.776 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 11:52:39.776 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/4 multipart/form-data;+boundary=----WebKitFormBoundarygfA41A9bAfDD2Rnk 140 - 204 - - 13.6410ms
2024-08-05 11:52:39.780 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:52:39.781 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:39.781 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:52:39.782 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:52:39.783 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:52:39.783 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:52:39.784 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:52:39.819 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 36.1157ms
2024-08-05 11:52:39.821 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:52:39.822 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 42.1453ms
2024-08-05 11:52:43.364 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:52:43.364 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:52:43.364 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:43.365 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:43.365 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:52:43.366 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:52:43.366 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:52:43.367 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:52:43.368 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:52:43.368 +07:00 [INF] Fetching all orders.
2024-08-05 11:52:43.370 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:52:43.369 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:52:43.371 +07:00 [INF] Fetched 3 orders.
2024-08-05 11:52:43.371 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:52:43.372 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:52:43.377 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:52:43.381 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:43.382 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:52:43.382 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:52:43.384 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:52:43.385 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:52:43.385 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:52:43.377 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 11:52:43.401 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:43.401 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:52:43.401 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:52:43.402 +07:00 [INF] Fetching all orders.
2024-08-05 11:52:43.402 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:52:43.404 +07:00 [INF] Fetched 3 orders.
2024-08-05 11:52:43.414 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:52:43.414 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 12.2338ms
2024-08-05 11:52:43.415 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:52:43.415 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 37.8718ms
2024-08-05 11:52:43.394 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 25.5243ms
2024-08-05 11:52:43.416 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:52:43.416 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 52.0887ms
2024-08-05 11:52:43.395 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 27.1771ms
2024-08-05 11:52:43.417 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 11:52:43.412 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 28.2257ms
2024-08-05 11:52:43.419 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:52:43.420 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 42.6363ms
2024-08-05 11:52:43.418 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 54.6584ms
2024-08-05 11:52:45.825 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders/3 - -
2024-08-05 11:52:45.827 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:45.828 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:52:45.828 +07:00 [INF] Route matched with {action = "GetOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] GetOrder(Int32) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 11:52:45.829 +07:00 [INF] Fetching order with ID: 3
2024-08-05 11:52:45.830 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:52:45.831 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 11:52:45.832 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview) in 2.8339ms
2024-08-05 11:52:45.833 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 11:52:45.834 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders/3 - - - 200 - application/json;+charset=utf-8 9.0143ms
2024-08-05 11:52:51.737 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:52:51.738 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:51.739 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:52:51.739 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:52:51.740 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:52:51.741 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:52:51.742 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:52:51.743 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.0413ms
2024-08-05 11:52:51.744 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:52:51.744 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:52:51.745 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 7.4079ms
2024-08-05 11:52:51.745 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:52:51.746 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:52:51.746 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:52:51.747 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:52:51.748 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:52:51.750 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:52:51.756 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 9.1852ms
2024-08-05 11:52:51.757 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:52:51.758 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 13.3398ms
2024-08-05 11:57:49.442 +07:00 [INF] Application Starting
2024-08-05 11:57:50.146 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:57:50.224 +07:00 [INF] Saved 7 entities to in-memory store.
2024-08-05 11:57:50.232 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 11:57:50.366 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 11:57:50.368 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 11:57:50.368 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 11:57:50.369 +07:00 [INF] Hosting environment: Development
2024-08-05 11:57:50.369 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 11:57:50.583 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 11:57:50.829 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 249.9622ms
2024-08-05 11:57:50.832 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 11:57:50.833 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 11:57:50.838 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 6.1115ms
2024-08-05 11:57:50.874 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 41.6534ms
2024-08-05 11:57:50.906 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 11:57:50.984 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 77.5354ms
2024-08-05 11:58:09.594 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:58:09.630 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:58:09.639 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:58:09.663 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:58:09.674 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:58:09.680 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:58:10.250 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:58:10.296 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 11:58:10.308 +07:00 [INF] CORS policy execution successful.
2024-08-05 11:58:10.308 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:58:10.309 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 11:58:10.310 +07:00 [INF] Fetching all products from the database.
2024-08-05 11:58:10.322 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 651.5952ms
2024-08-05 11:58:10.324 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:58:10.328 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 734.7693ms
2024-08-05 11:58:10.329 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 11:58:10.331 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 11:58:10.349 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 39.2004ms
2024-08-05 11:58:10.351 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 11:58:10.351 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 55.3702ms
2024-08-05 12:04:53.066 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:06:04.810 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:06:17.517 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:08:10.920 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:08:10.942 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:08:10.944 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:08:11.008 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 12:08:11.028 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:08:11.030 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:08:11.030 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:08:33.868 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:08:33.893 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:08:33.895 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:08:33.970 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 12:08:34.215 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:08:34.263 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:08:34.264 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:08:34.376 +07:00 [INF] Executed DbCommand (83ms) [Parameters=[], CommandType='"Text"', CommandTimeout='60']
CREATE DATABASE [Interview];
2024-08-05 12:08:34.414 +07:00 [INF] Executed DbCommand (34ms) [Parameters=[], CommandType='"Text"', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [Interview] SET READ_COMMITTED_SNAPSHOT ON;
END;
2024-08-05 12:08:34.424 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2024-08-05 12:08:34.479 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2024-08-05 12:08:34.481 +07:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2024-08-05 12:08:34.492 +07:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2024-08-05 12:08:34.498 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2024-08-05 12:08:34.508 +07:00 [INF] Applying migration '20240805050811_InitialCreate'.
2024-08-05 12:08:34.546 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [Orders] (
    [OrderId] int NOT NULL IDENTITY,
    [UserId] int NOT NULL,
    [Total] decimal(18,2) NOT NULL,
    [OrderDate] datetime2 NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_Orders] PRIMARY KEY ([OrderId])
);
2024-08-05 12:08:34.549 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [Products] (
    [ProductId] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    [Price] decimal(18,2) NOT NULL,
    [Stock] int NOT NULL,
    [Image] varbinary(max) NOT NULL,
    [CreatedAt] datetime2 NOT NULL,
    [UpdatedAt] datetime2 NOT NULL,
    CONSTRAINT [PK_Products] PRIMARY KEY ([ProductId])
);
2024-08-05 12:08:34.551 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [Users] (
    [UserId] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [PasswordHash] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [CreatedAt] datetime2 NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([UserId])
);
2024-08-05 12:08:34.553 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [OrderItems] (
    [OrderItemId] int NOT NULL IDENTITY,
    [OrderId] int NOT NULL,
    [ProductId] int NOT NULL,
    [Quantity] int NOT NULL,
    [Price] decimal(18,2) NOT NULL,
    CONSTRAINT [PK_OrderItems] PRIMARY KEY ([OrderItemId]),
    CONSTRAINT [FK_OrderItems_Orders_OrderId] FOREIGN KEY ([OrderId]) REFERENCES [Orders] ([OrderId]) ON DELETE CASCADE,
    CONSTRAINT [FK_OrderItems_Products_ProductId] FOREIGN KEY ([ProductId]) REFERENCES [Products] ([ProductId]) ON DELETE CASCADE
);
2024-08-05 12:08:34.584 +07:00 [INF] Executed DbCommand (30ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'ProductId', N'CreatedAt', N'Description', N'Image', N'Name', N'Price', N'Stock', N'UpdatedAt') AND [object_id] = OBJECT_ID(N'[Products]'))
    SET IDENTITY_INSERT [Products] ON;
INSERT INTO [Products] ([ProductId], [CreatedAt], [Description], [Image], [Name], [Price], [Stock], [UpdatedAt])
VALUES (1, '2024-07-31T01:29:40.0490000', N'coke', coke', 10.0, 69, '2024-08-01T21:47:30.2253321'),
(2, '2024-07-31T01:35:04.4450000', N'pepsi', 0xFFD8FFE000104A46494600010100000100010000FFDB008400090607101111101211130F12151012151110101310131010170F151216171715191618202920181A251B1518213D212529372E312E171F3338332C37342D2E37010A0A0A0E0D0E1B10101B2D2620252D2F322D352D2E2F2D2D2B2D2F302D2D2D2E2D2D2D2D2D2D2B2D2D2F2D2D302D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2FFFC000110800E100E103011100021101031101FFC4001C0001000105010100000000000000000000000502030406070801FFC40044100002010301040507070A060300000000000102030411210506123113224151710732618191A1B11423527274B3C1333435627382B2D1E1F024254263A2D21792A3FFC4001B01010002030101000000000000000000000002050103040607FFC400341101000201020304070802030000000000000102030411122131324151710513338191A1B114425261C1D1E1F01522062362FFDA000C03010002110311003F00ECC6580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022F79F68CADAD6B57870F1524A494BCD7D78AE1F5E71EB278A9C778AC77A192F14A4DA7B9CF5794ABCEDB7A78CE3FD5CD1D9FE3E7F17C9C5FE423F0A98EFAD57ABA1CFBAEAE17BB888FF008E9FC5F5FDCFB6567EECFC57A86F7569BC46DA727E8BBAFF00F6313E8EDBADBEA46AEB3D296F8FF2909EFE5DC5E256987F5D998D0CCFDE84E75BB75A4AD4BCA1D75CED5FFEF225FE3EDF8A109F48D63EECB3ED77EAA4E2E52B69462B9C9CD259F4648CE8AD13B714365359168DF8676FCD31BA1BC8AFE35A4A12874528C712716F559CE9D9FC8D19F04E19DA5BB067AE6AF155B01A5B800000000000000000000000000000000001CC7CA76F33E9636949AC525C559EBF95947AA935F453CF8CBD059E87072E39F72AF5DA8989E0AFBDA9DA4D28E54B2E5D5C61F2941F16AD7359C7F43B6D1BCB931CC70F5675BDBA9492E2497D2C69E6E7978E9FC885ADB43A2B5DE525B128B5266BC93C9B31C73656D2D25EAFC3FA18C7D0C9D58139AD4D910D532A631E38F0E5E7926B47DBF867433D39A3B7146CB1BA9B5A5B3EF1748B14EB354EB3E4B81BEACFBBAADE7C1C88EAB1465C7BC758434996D87270DBBDDA0A45E8000000000000000000000000000000001F501E6ABBBD75273A92F3AA4E5524F9B6E4F3F13D15622B110F39799B4CCA885C7712E286BE09EE4BD96D0C472FBF1CD67D9CC84D6267937D32CD639A42CF785536DF0B792338778EA95757113D145EEDE551E70D6866B87662FAA8B7730AA6D26FF91B228D139A57EC769F04E13787AB7DED763F718B63E28984AB9B86D16966EF4D68CA29C79AC712F4493C1AB0D663ABA35578E5B3AC6EADD4AB595A5496B29D08713EF928E1BF5B592972D786F311E2B9C53C54899F04A1AD30000000000000000000000000000000003CBAF972E4BFA7C4F412F3DB3E40C412D9365EC3A93A6AAD5953B7A2FCDAB59F07176F522BAD53D4B06ACBACC587B53CDD3A5F45EA3576DB157FBFDF1E4C9E8765C34955BDACFE952A34E8C3FF00A36FDC57DFD33F86BFDF93D1E1FF00866798FF007B447BFF00689FA8E8ECB9E8AB5F517D92AB4695687B29B4FDC629E99FC55FEFCD2CDFF0CCF11BD2D13EFF00DE23EAB57BBB95630956A33A7754A3ACAA509394A0BFDCA6FAD0F663D25960D762CDCA279BCDEB7D13A9D24ED92B3FDFAFBB7445399D90ABB427F6E4BE663C965475F05CBDE68C5D65D9A8E90EADB8BFA3ACBF631F8B2933FB4B79AEF0FB3AF9274D4D800000000000000000000000000000000079694B93E78C68FE05F4A83BD3FB1AD29D1A4AEEBC14F89B8DA50979B39C5E25526BB69C5E98ED7A15DADD5FAA8E1AF55EFA17D133ACC9BDBB31D566F6FAAD69BA9564E737FEA6F947E8A5CA31F4228666667797D27061A61A4531C6D0B28C3A22572155A525F4B19F53C9866637989F06CFE4DED2752FA134DC63462E7369B8E53D230D3BE4F38EE8B36E1AEF78547A733571E926B3D6D3B47EB3EE8EFF00CD2FE51374E30CDD5BC38573AF4E2BAAB5FCA45762D755EBEF3D168B53333EAEF3E5FB3E63AED2C6DEB291E7FBB5CDBEB14A3EA5ED8B3AF1759736AB96CEADB89FA3ACBF62BE2CA5CFED2DE6BAC3ECEBE49D353600000000000000000000000000000000A2B3C464FBA2DFB840F3151B6E274A0BCEAAE318F3C75A5C2BB35D4BCB4ED1BCA8EB5DE764DEDFAC9D79421E65BA56F4977429F57DF2E27EB3CB66BCDEF332FA97A2B4F1834B4AC77C6F3EFF00E36604A0E2DA9269AE69A69AF53352D2B313CE1F43644AAE17A635CF24B56DBECF109459D9F72361FC92DD29AF9DAB89D6E594F1D5869F457BDB3B70D382BCFABC1FA5B5DF6ACFBD7B35E51FACFBFE9B2BDF3DA31A10B59CF1C32BB852A917CA546A53A91A89F7AE16DF8A47660ACDA676F052E6B456237F173EDF6B3E85CE197D59F0EBCB114D2FEFD25B69ADC55DD53ACAED3EF74ADC3FD1D65FB15F1653E7F696F35C61F675F24F1A9B000000000000000000000000000000005171E64FEACBE0C40F34EEF3FF0015699E4ABD1FBC897397B16F295363F691E6BF749F4B573AB55279F1E3793CADBABEB586DB52B31E11F450E6DB6DE5E7BDE5FB4C37D65F721B61D1F70B749C1C6EAE23892D68529738FF00B925F4BB97673E78C74E1C53DAB3CBFA63D2D1689C186797DE9F1FCA3F59F7747418B3A9E69C9FCA76DB5735551A5252A76AFE71A7E756968F1D8F852C78B9169A3C5C35E29EFF00A2AF59978A7863B97BCA57E527DFC493FADC1AFBCDBA3EC356BFB50E85B8F1C6CEB2FB3C1FB567F12A737B4B79AD717623C9386B6C0000000000000000000000000000000145C7993FAB2F83104BCB94E6E0E125CE3C338F8AC345E4C6FC94713B5B74F6DE82E99D5879973155E1FBFACE3E2A7C5A781E5F3E39A649897D3BD13A98CFA5ACC758E53FA7C9F3656C9B8B978A34E53D70E58C535E327A7AB99AEB59B747767D561D3C6F92DB7D7E1D5D0F77F74EDECF15AEA74A55175939B51A306BB5716389FEB3F52475E2D3F7F59798F487A6AF9A2698FF00D6BF39F3F08FCBE692DA1BF1B3E8A7F3DD2BFA3453A8DFEF79BEF3B6BA6CB6EEDBCDE7AFA9C55EFF008349DE3F2875EBC5D3B74E841E9296735A4BBB896905E1AFA4EDC5A4AD79DB9B8B36B66DCA9C90BBAFB2FA4B9B7736BA387F88ACF5C46852C4A59CF7E91D3B648DF9AD3149DBACF28F7B460A6F7899E91CE7DC9CDF9AEE7993D38A7C5ED4DFE2674D5E1AECCEB6779874FDCC7FE5F63F66A5FC08A6CDED2DE6B7C5D88F24C9ADB000000000000000000000000000000005171E64FEACBE0C40F2E460B873AE8D2E5A6A9F6FABE25EECA299E6D8777B68C781DBD4547B656D52BC154A74EACB198C93E519639F63D70CE4D469AB798BCC6FB3BF47AFCB862694B70EEF9B436CED1E3E86AD5AD49A7C3D1C7E652CF2C2A6965786726EC78716DBD621CD9B3E6E2FF799DD0F526DC9F13E36F4E2796DEBCF2F537C46DC9CD3332F8A3AE1E98CE7C5194765DB3B5A95A71A74A329CE6F1184565B7FDF698B5A2B1BCB35A4DA7686C7735216B49DAD29AA952A34EF2B45E63D5795420FB629EADF6BF610C359BDBD65A39777EED9A8BC63A7ABACF3EFFD997BE5E6C7D5EDC72F7BF612C1D259D5F58753DCC5FE5F63F66A5FC08A5CDED2DE6B9C5D88F24C9AD30000000000000000000000000000000145C7993FAB2F83104BCB505A2F05F02F54332BB1248A6ACF6AE611A55E9C6E29C562119B71A905DD0AABAD15E8D569C8D738779DEB3B4FF7AC271A8988E1BC6F1FDEF5DF916CE9F9B5AEA87EAD4A30AEBD5284A2FDA86D9A3BA27DFB25BE0B77CC7BB77D859ECD86B2AD755FBA34E8C282F5CA7297C07FDD3D2223CE77FA31FF004475999F28555F6E70C254AD6946D61358A8E3273AF35DD3AAF5E1FD55844AB8237E2BCEF3F2F8237D44EDC348DA3E7F146DBF35E274B925B36F8C7AB17DB94B2FBB0CE7C3D25DBAB8E70EAFBA4B16163F64A1EDE8A252E5F696F395CE2EC4794258D6980000000000000000000000000000000B5752C53A8FBA127FF1623A92F2E4259C67B97C0BD50DBAA5F62ECA9DCF1F5E9D2A7463D256AD51B54E116D25CB2DC9BC2492CB237C914DB96F32963C737EFDA212B1DDC9A95174674EE615E4E9D2A94B892751633094649384B0F387D9A8AE68DA78B94C7562DA79DE3867789E8A2F777A74E9D49C2B5AD75471D346855739D34DE389A696639C2CC72B5254CF133113131BF4DFBD1BE9AD58DE26276EBB2ED2DD3AD2508BA96B0AD522A74ED2755C6E2516B3158C70C64D6AA2DA7A989D4D639ED3B78F7251A4B4C758DFC3BD6A86C04E9C2A55AF46D95694E342359547293A6F867C4E316A094B4CBF6199CFFEDB562676EBB15D372DED3B6FD372E2DA31B6B2A8A304EACEBF14D4A6E52E0A914B893D1633D9EB278ED3392D1E1B35E5A4463A4F8EE90DEDA4A31518A979EB9BE6DC73CDF891C33BC6ED9A98DA6223C5D67747F30B0FB250FB9894B97B76F395D63EC479258D6980000000000000000000000000000000C7DA5F91ADFB29FF0003331D589E8F30471D9DDF8178A396DBBA6E8FC8F69FCA3A4E8DFC9149D3C3A916EACF86493D1E1E34CEAB268CDC5C74E1EBCDD18387D5DF8BA724A6C6DAF6F6DF27A76FD2D68D3AF2B8AD52A4152E293A4E9704219784A1296ADF3F419B62B64DE6DCB78DA3E3BB14CB5A6D14E7B4EF3F0D946DBDB74D50AD1A570E72AABA3518ECFB7B792A2DF5A152A25AE985D4C6A862C33C51335E51F9CCF3FCBF93267AC56622DBCF9447C7F8666F14AC29ED2A9713AB5F8E8D584E56CA8E5CEAD35171E1AB9C460F11E6B2B5F410C3EB6D8629111B4F7EFF00A259BD557371CCCEF1DCC3D8DBC74A0B8EAD7B98F1569D6AF67D052AF6F538E6E5C30737F369A78795E04F260B4F2888E9B44EFB4C79F8A38F5358E7369EBCE36DE3DC8ABCDA74EAD2B5A508383A352E24E3A7028D6AB1946317CDE12C6A8E9C58E6B6B5A67AEDF27266CB5BD6B588E933F3666F55DAA90E28E5253C6BA3C61E1FAD6198C559AC27A8BC5A636F175CDD0FD1F61F64A1F73128F2F6EDE72BBC7D88F24B104C0000000000000000000000000000000626D79F0DBDC3FA346A3F6536CCD7AC313D1E61A7D85DA8ECBD0270D729CD8CB5F531296361DD79CC9D7A34DFB52B752ACA527294A529379729372937E96CCC44446D04CCCCEF2A0CB0BD6EFACBC7F12508CB68DF1A6B1A699927CBF55E59CD87A3B75511BC3ABEE9C716162BBAD282F47E4625365F696F395C629DE91E509535A600000000000000000000000000000003076F7E6B75F67ADF752254ED4316E92F32411750A395E81386B94D6C9A893D7FBFEF2659A4B12E3CE7E24ABD1A6DDA95924005DA5A35E24A10B367DF19270CEBE76396354A4BE273618E4EED4CEF30EB3BA7F9858FD9287DCC4A6CBDBB79CAE317623CA12A6B4C000000000000000000000000000000058BFB7E96955A79C7494E74F3CF1C5171CFBCCC4ED3BB131BC6CF356D4D95716B5254ABD3953945F26BAAD77C65CA4BD25CD2F178DE14D929349DA58F066C869967DAD6C1B21AB7D944E793308F35194659DA4CA1BC1B4AE5296A8944A368E4DA76C395ECA346DA13A9372584969849AE272E4A39ED7DC7346D8ABBD9DB79F5F78AD1D8F6459F416F6F4739E868D3A4DF7B841473EE292F6E2B4CF8AEAB1C3110CB22C800000000000000000000000000000000185B5F65D1BAA52A55A319269E1B49B8BFA517D8C956F6ACEF5946D58B46D6873EBAF261D6EA4DF0FA1C5FFC658F89D55D6DE3AC44B96DA1C73D37850FC994972AC9FA256BC3EF5227F6EFFCFCD0FB0478FC98357C9D54EFA6FC22D7C2667EDD1E0C4E87F359FF00C7755F6C57EE4BFEC4BEDD5FC28CE827F13328F9359E9C5571E16F297C5989D7F85598F47C77D99F65E4D9E7AF3963B3CD827FBAB26BB6BAF3D21B6BA2A4756F9B1F64D1B5A6A9D28C6385D6928A5293EF78E672DF25AF3BDA5D54A5691B5619C4120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFD9, N'pepsi', 20.0, 85, '2024-08-01T21:47:30.2155640'),
(3, '2024-07-31T01:35:04.4450000', N'pepsi(1000ml)', pepsi(1000ml)', 30.0, 82, '2024-08-01T21:47:30.2059936'),
(4, '2024-07-31T01:35:04.4450000', N'coke(1000ml)', coke(1000ml)', 30.0, 76, '2024-08-01T21:47:30.1954431'),
(5, '2024-07-31T01:35:04.4450000', N'green tea', , N'green tea', 40.0, 81, '2024-08-01T21:47:30.1864804'),
(6, '2024-07-31T01:35:04.4450000', N'thai tea', 0xthai tea', 50.0, 83, '2024-08-01T21:47:30.1757295'),
(7, '2024-07-31T01:35:04.4450000', N'coke(taste)', coke(taste)', 0.0, 0, '0001-01-01T00:00:00.0000000');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'ProductId', N'CreatedAt', N'Description', N'Image', N'Name', N'Price', N'Stock', N'UpdatedAt') AND [object_id] = OBJECT_ID(N'[Products]'))
    SET IDENTITY_INSERT [Products] OFF;
2024-08-05 12:08:34.607 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX [IX_OrderItems_OrderId] ON [OrderItems] ([OrderId]);
2024-08-05 12:08:34.608 +07:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX [IX_OrderItems_ProductId] ON [OrderItems] ([ProductId]);
2024-08-05 12:08:34.609 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20240805050811_InitialCreate', N'6.0.0');
2024-08-05 12:09:34.416 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:09:34.440 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:09:34.442 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:09:34.506 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 12:09:34.654 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:09:34.655 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:09:34.656 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:09:34.758 +07:00 [INF] Executed DbCommand (75ms) [Parameters=[], CommandType='"Text"', CommandTimeout='60']
CREATE DATABASE [Interview];
2024-08-05 12:09:34.783 +07:00 [INF] Executed DbCommand (22ms) [Parameters=[], CommandType='"Text"', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [Interview] SET READ_COMMITTED_SNAPSHOT ON;
END;
2024-08-05 12:09:34.792 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2024-08-05 12:09:34.842 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2024-08-05 12:09:34.844 +07:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2024-08-05 12:09:34.855 +07:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2024-08-05 12:09:34.862 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2024-08-05 12:09:34.873 +07:00 [INF] Applying migration '20240805050811_InitialCreate'.
2024-08-05 12:09:34.946 +07:00 [INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [Orders] (
    [OrderId] int NOT NULL IDENTITY,
    [UserId] int NOT NULL,
    [Total] decimal(18,2) NOT NULL,
    [OrderDate] datetime2 NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_Orders] PRIMARY KEY ([OrderId])
);
2024-08-05 12:09:34.948 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [Products] (
    [ProductId] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    [Price] decimal(18,2) NOT NULL,
    [Stock] int NOT NULL,
    [Image] varbinary(max) NOT NULL,
    [CreatedAt] datetime2 NOT NULL,
    [UpdatedAt] datetime2 NOT NULL,
    CONSTRAINT [PK_Products] PRIMARY KEY ([ProductId])
);
2024-08-05 12:09:34.950 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [Users] (
    [UserId] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [PasswordHash] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [CreatedAt] datetime2 NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([UserId])
);
2024-08-05 12:09:34.952 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [OrderItems] (
    [OrderItemId] int NOT NULL IDENTITY,
    [OrderId] int NOT NULL,
    [ProductId] int NOT NULL,
    [Quantity] int NOT NULL,
    [Price] decimal(18,2) NOT NULL,
    CONSTRAINT [PK_OrderItems] PRIMARY KEY ([OrderItemId]),
    CONSTRAINT [FK_OrderItems_Orders_OrderId] FOREIGN KEY ([OrderId]) REFERENCES [Orders] ([OrderId]) ON DELETE CASCADE,
    CONSTRAINT [FK_OrderItems_Products_ProductId] FOREIGN KEY ([ProductId]) REFERENCES [Products] ([ProductId]) ON DELETE CASCADE
);
2024-08-05 12:09:34.980 +07:00 [INF] Executed DbCommand (27ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'ProductId', N'CreatedAt', N'Description', N'Image', N'Name', N'Price', N'Stock', N'UpdatedAt') AND [object_id] = OBJECT_ID(N'[Products]'))
    SET IDENTITY_INSERT [Products] ON;
INSERT INTO [Products] ([ProductId], [CreatedAt], [Description], [Image], [Name], [Price], [Stock], [UpdatedAt])
VALUES (1, '2024-07-31T01:29:40.0490000', N'coke', , N'coke', 10.0, 69, '2024-08-01T21:47:30.2253321'),
(2, '2024-07-31T01:35:04.4450000', N'pepsi', pepsi', 20.0, 85, '2024-08-01T21:47:30.2155640'),
(3, '2024-07-31T01:35:04.4450000', N'pepsi(1000ml)', pepsi(1000ml)', 30.0, 82, '2024-08-01T21:47:30.2059936'),
(4, '2024-07-31T01:35:04.4450000', N'coke(1000ml)', , N'coke(1000ml)', 30.0, 76, '2024-08-01T21:47:30.1954431'),
(5, '2024-07-31T01:35:04.4450000', N'green tea', green tea', 40.0, 81, '2024-08-01T21:47:30.1864804'),
(6, '2024-07-31T01:35:04.4450000', N'thai tea', , N'thai tea', 50.0, 83, '2024-08-01T21:47:30.1757295'),
(7, '2024-07-31T01:35:04.4450000', N'coke(taste)', coke(taste)', 0.0, 0, '0001-01-01T00:00:00.0000000');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'ProductId', N'CreatedAt', N'Description', N'Image', N'Name', N'Price', N'Stock', N'UpdatedAt') AND [object_id] = OBJECT_ID(N'[Products]'))
    SET IDENTITY_INSERT [Products] OFF;
2024-08-05 12:09:35.001 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX [IX_OrderItems_OrderId] ON [OrderItems] ([OrderId]);
2024-08-05 12:09:35.002 +07:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX [IX_OrderItems_ProductId] ON [OrderItems] ([ProductId]);
2024-08-05 12:09:35.004 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20240805050811_InitialCreate', N'6.0.0');
2024-08-05 12:21:24.629 +07:00 [INF] Application Starting
2024-08-05 12:21:25.648 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:21:25.652 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:21:25.652 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:21:25.752 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 12:21:26.337 +07:00 [INF] Executed DbCommand (21ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2024-08-05 12:21:26.399 +07:00 [INF] Executed DbCommand (43ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']

IF EXISTS
    (SELECT *
     FROM [sys].[objects] o
     WHERE [o].[type] = 'U'
     AND [o].[is_ms_shipped] = 0
     AND NOT EXISTS (SELECT *
         FROM [sys].[extended_properties] AS [ep]
         WHERE [ep].[major_id] = [o].[object_id]
             AND [ep].[minor_id] = 0
             AND [ep].[class] = 1
             AND [ep].[name] = N'microsoft_database_tools_support'
    )
)
SELECT 1 ELSE SELECT 0
2024-08-05 12:21:26.405 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 12:21:26.794 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 12:21:26.795 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 12:21:26.795 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 12:21:26.796 +07:00 [INF] Hosting environment: Development
2024-08-05 12:21:26.796 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 12:21:27.096 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 12:21:27.347 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 253.8343ms
2024-08-05 12:21:27.349 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 12:21:27.350 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 12:21:27.358 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 8.3690ms
2024-08-05 12:21:27.427 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 76.7527ms
2024-08-05 12:21:27.454 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 12:21:27.534 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 79.8813ms
2024-08-05 12:21:47.580 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Users - -
2024-08-05 12:21:47.604 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:21:47.606 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Users - - - 204 - - 25.4524ms
2024-08-05 12:21:47.616 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Users application/json 72
2024-08-05 12:21:47.620 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:21:47.624 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 12:21:47.649 +07:00 [INF] Route matched with {action = "PostUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] PostUser(webapi_shopping_interview.Model.User) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 12:21:47.728 +07:00 [INF] Creating a new user.
2024-08-05 12:21:47.730 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 12:21:48.113 +07:00 [INF] Executed DbCommand (54ms) [Parameters=[@__user_Username_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[CreatedAt], [u].[Email], [u].[PasswordHash], [u].[Username]
FROM [Users] AS [u]
WHERE [u].[Username] = @__user_Username_0
2024-08-05 12:21:48.256 +07:00 [INF] Executed DbCommand (5ms) [Parameters=[@p0='?' (DbType = DateTime2), @p1='?' (Size = 4000), @p2='?' (Size = 4000), @p3='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Users] ([CreatedAt], [Email], [PasswordHash], [Username])
VALUES (@p0, @p1, @p2, @p3);
SELECT [UserId]
FROM [Users]
WHERE @@ROWCOUNT = 1 AND [UserId] = scope_identity();
2024-08-05 12:21:48.300 +07:00 [INF] User with ID: 1 created successfully.
2024-08-05 12:21:48.306 +07:00 [INF] Executing CreatedAtActionResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 12:21:48.337 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview) in 679.8985ms
2024-08-05 12:21:48.343 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 12:21:48.353 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Users application/json 72 - 201 - application/json;+charset=utf-8 737.1901ms
2024-08-05 12:21:57.361 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 12:21:57.362 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:21:57.363 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 12:21:57.365 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 12:21:57.374 +07:00 [INF] Fetching user with Username: audi
2024-08-05 12:21:57.406 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 12:21:57.419 +07:00 [INF] Executed DbCommand (7ms) [Parameters=[@__username_0='?' (Size = 4000), @__passwordHash_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[CreatedAt], [u].[Email], [u].[PasswordHash], [u].[Username]
FROM [Users] AS [u]
WHERE ([u].[Username] = @__username_0) AND ([u].[PasswordHash] = @__passwordHash_1)
2024-08-05 12:21:57.425 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 12:21:57.426 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 59.1533ms
2024-08-05 12:21:57.426 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 12:21:57.428 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 67.6760ms
2024-08-05 12:21:57.625 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:21:57.626 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:21:57.627 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:21:57.629 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:21:57.632 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:21:57.632 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 12:21:57.642 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 12:21:57.665 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:21:57.686 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:21:57.689 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:21:57.689 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:21:57.693 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:21:57.694 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:21:57.695 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 12:21:57.695 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 64.0925ms
2024-08-05 12:21:57.697 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 12:21:57.697 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:21:57.699 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 73.9436ms
2024-08-05 12:21:57.699 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:21:57.701 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 7.0453ms
2024-08-05 12:21:57.702 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:21:57.702 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 15.9465ms
2024-08-05 12:33:39.833 +07:00 [INF] Application Starting
2024-08-05 12:33:40.568 +07:00 [ERR] An error occurred while creating the database.
System.InvalidOperationException: The entity type 'Stock' requires a primary key to be defined. If you intended to use a keyless entity type, call 'HasNoKey' in 'OnModelCreating'. For more information on keyless entity types, see https://go.microsoft.com/fwlink/?linkid=2141943.
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateNonNullPrimaryKeys(IModel model, IDiagnosticsLogger`1 logger)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator.Validate(IModel model, IDiagnosticsLogger`1 logger)
   at Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.Validate(IModel model, IDiagnosticsLogger`1 logger)
   at Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator.Validate(IModel model, IDiagnosticsLogger`1 logger)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelRuntimeInitializer.Initialize(IModel model, Boolean designTime, IDiagnosticsLogger`1 validationLogger)
   at Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(DbContext context, ModelCreationDependencies modelCreationDependencies, Boolean designTime)
   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel(Boolean designTime)
   at Microsoft.EntityFrameworkCore.Internal.DbContextServices.get_Model()
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScopeCache(ServiceCallSite callSite, RuntimeResolverContext context)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(ServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScopeCache(ServiceCallSite callSite, RuntimeResolverContext context)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(ServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScopeCache(ServiceCallSite callSite, RuntimeResolverContext context)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(ServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScopeCache(ServiceCallSite callSite, RuntimeResolverContext context)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(ServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScopeCache(ServiceCallSite callSite, RuntimeResolverContext context)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(ServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScopeCache(ServiceCallSite callSite, RuntimeResolverContext context)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(ServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.Resolve(ServiceCallSite callSite, ServiceProviderEngineScope scope)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine.<>c__DisplayClass2_0.<RealizeService>b__0(ServiceProviderEngineScope scope)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(ServiceIdentifier serviceIdentifier, ServiceProviderEngineScope serviceProviderEngineScope)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.GetService(Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)
   at Microsoft.EntityFrameworkCore.DbContext.get_DbContextDependencies()
   at Microsoft.EntityFrameworkCore.DbContext.get_ContextServices()
   at Microsoft.EntityFrameworkCore.DbContext.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance()
   at Microsoft.EntityFrameworkCore.Infrastructure.Internal.InfrastructureExtensions.GetService[TService](IInfrastructure`1 accessor)
   at Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated()
   at Program.<Main>$(String[] args) in C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\Program.cs:line 75
2024-08-05 12:33:40.816 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 12:33:40.818 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 12:33:40.819 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 12:33:40.819 +07:00 [INF] Hosting environment: Development
2024-08-05 12:33:40.820 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 12:33:41.294 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 12:33:41.529 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 237.6149ms
2024-08-05 12:33:41.530 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 12:33:41.530 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 12:33:41.537 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 6.9705ms
2024-08-05 12:33:41.573 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 43.2115ms
2024-08-05 12:33:41.603 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 12:33:41.685 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 82.7374ms
2024-08-05 12:35:28.252 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:35:28.277 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:35:28.279 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:35:28.347 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 12:35:28.368 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:35:28.369 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:35:28.370 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:35:37.726 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:35:37.750 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:35:37.751 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:35:37.818 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 12:35:37.982 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:35:37.983 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:35:37.984 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 12:35:38.109 +07:00 [INF] Executed DbCommand (96ms) [Parameters=[], CommandType='"Text"', CommandTimeout='60']
CREATE DATABASE [Interview2];
2024-08-05 12:35:38.139 +07:00 [INF] Executed DbCommand (27ms) [Parameters=[], CommandType='"Text"', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [Interview2] SET READ_COMMITTED_SNAPSHOT ON;
END;
2024-08-05 12:35:38.149 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2024-08-05 12:35:38.198 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2024-08-05 12:35:38.201 +07:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2024-08-05 12:35:38.212 +07:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2024-08-05 12:35:38.218 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2024-08-05 12:35:38.231 +07:00 [INF] Applying migration '20240805053528_InitialCreate'.
2024-08-05 12:35:38.266 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [Orders] (
    [OrderId] int NOT NULL IDENTITY,
    [UserId] int NOT NULL,
    [Total] decimal(18,2) NOT NULL,
    [OrderDate] datetime2 NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_Orders] PRIMARY KEY ([OrderId])
);
2024-08-05 12:35:38.269 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [Products] (
    [ProductId] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    [Price] decimal(18,2) NOT NULL,
    [Image] varbinary(max) NOT NULL,
    [CreatedAt] datetime2 NOT NULL,
    [UpdatedAt] datetime2 NOT NULL,
    CONSTRAINT [PK_Products] PRIMARY KEY ([ProductId])
);
2024-08-05 12:35:38.271 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [Users] (
    [UserId] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [PasswordHash] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [CreatedAt] datetime2 NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([UserId])
);
2024-08-05 12:35:38.273 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [OrderItems] (
    [OrderItemId] int NOT NULL IDENTITY,
    [OrderId] int NOT NULL,
    [ProductId] int NOT NULL,
    [Quantity] int NOT NULL,
    [Price] decimal(18,2) NOT NULL,
    CONSTRAINT [PK_OrderItems] PRIMARY KEY ([OrderItemId]),
    CONSTRAINT [FK_OrderItems_Orders_OrderId] FOREIGN KEY ([OrderId]) REFERENCES [Orders] ([OrderId]) ON DELETE CASCADE,
    CONSTRAINT [FK_OrderItems_Products_ProductId] FOREIGN KEY ([ProductId]) REFERENCES [Products] ([ProductId]) ON DELETE CASCADE
);
2024-08-05 12:35:38.275 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [Stocks] (
    [ProductId] int NOT NULL,
    [Quantity] int NOT NULL,
    CONSTRAINT [PK_Stocks] PRIMARY KEY ([ProductId]),
    CONSTRAINT [FK_Stocks_Products_ProductId] FOREIGN KEY ([ProductId]) REFERENCES [Products] ([ProductId]) ON DELETE CASCADE
);
2024-08-05 12:35:38.321 +07:00 [INF] Executed DbCommand (45ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'ProductId', N'CreatedAt', N'Description', N'Image', N'Name', N'Price', N'UpdatedAt') AND [object_id] = OBJECT_ID(N'[Products]'))
    SET IDENTITY_INSERT [Products] ON;
INSERT INTO [Products] ([ProductId], [CreatedAt], [Description], [Image], [Name], [Price], [UpdatedAt])
VALUES (1, '2024-07-31T01:29:40.0490000', N'coke', coke', 10.0, '2024-08-01T21:47:30.2253321'),
(2, '2024-07-31T01:35:04.4450000', N'pepsi', pepsi', 20.0, '2024-08-01T21:47:30.2155640'),
(3, '2024-07-31T01:35:04.4450000', N'pepsi(1000ml)', pepsi(1000ml)', 30.0, '2024-08-01T21:47:30.2059936'),
(4, '2024-07-31T01:35:04.4450000', N'coke(1000ml)', 0xcoke(1000ml)', 30.0, '2024-08-01T21:47:30.1954431'),
(5, '2024-07-31T01:35:04.4450000', N'green tea', green tea', 40.0, '2024-08-01T21:47:30.1864804'),
(6, '2024-07-31T01:35:04.4450000', N'thai tea', 0xthai tea', 50.0, '2024-08-01T21:47:30.1757295'),
(7, '2024-07-31T01:35:04.4450000', N'coke(taste)', coke(taste)', 0.0, '0001-01-01T00:00:00.0000000');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'ProductId', N'CreatedAt', N'Description', N'Image', N'Name', N'Price', N'UpdatedAt') AND [object_id] = OBJECT_ID(N'[Products]'))
    SET IDENTITY_INSERT [Products] OFF;
2024-08-05 12:35:38.365 +07:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'ProductId', N'Quantity') AND [object_id] = OBJECT_ID(N'[Stocks]'))
    SET IDENTITY_INSERT [Stocks] ON;
INSERT INTO [Stocks] ([ProductId], [Quantity])
VALUES (1, 69),
(2, 85),
(3, 82),
(4, 76),
(5, 81),
(6, 83),
(7, 0);
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'ProductId', N'Quantity') AND [object_id] = OBJECT_ID(N'[Stocks]'))
    SET IDENTITY_INSERT [Stocks] OFF;
2024-08-05 12:35:38.366 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX [IX_OrderItems_OrderId] ON [OrderItems] ([OrderId]);
2024-08-05 12:35:38.368 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX [IX_OrderItems_ProductId] ON [OrderItems] ([ProductId]);
2024-08-05 12:35:38.369 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20240805053528_InitialCreate', N'6.0.0');
2024-08-05 12:37:09.652 +07:00 [INF] Application Starting
2024-08-05 12:37:10.426 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:37:10.522 +07:00 [INF] Saved 14 entities to in-memory store.
2024-08-05 12:37:10.531 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 12:37:10.666 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 12:37:10.666 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 12:37:10.667 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 12:37:10.667 +07:00 [INF] Hosting environment: Development
2024-08-05 12:37:10.668 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 12:37:11.420 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 12:37:11.664 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 247.2766ms
2024-08-05 12:37:11.665 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 12:37:11.666 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 12:37:11.677 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 11.6934ms
2024-08-05 12:37:11.722 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 56.2613ms
2024-08-05 12:37:11.767 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 12:37:11.845 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 77.3477ms
2024-08-05 12:37:17.555 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Users - -
2024-08-05 12:37:17.579 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:37:17.583 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Users - - - 204 - - 28.3004ms
2024-08-05 12:37:17.586 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Users application/json 72
2024-08-05 12:37:17.590 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:37:17.594 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 12:37:17.617 +07:00 [INF] Route matched with {action = "PostUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] PostUser(webapi_shopping_interview.Model.User) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 12:37:17.669 +07:00 [INF] Creating a new user.
2024-08-05 12:37:17.675 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:37:17.919 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 12:37:17.925 +07:00 [INF] User with ID: 1 created successfully.
2024-08-05 12:37:17.932 +07:00 [INF] Executing CreatedAtActionResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 12:37:17.962 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview) in 339.318ms
2024-08-05 12:37:17.965 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 12:37:17.967 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Users application/json 72 - 201 - application/json;+charset=utf-8 380.9997ms
2024-08-05 12:37:25.640 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 12:37:25.641 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:37:25.642 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 12:37:25.644 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 12:37:25.651 +07:00 [INF] Fetching user with Username: audi
2024-08-05 12:37:25.666 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:37:25.675 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 12:37:25.676 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 31.163ms
2024-08-05 12:37:25.678 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 12:37:25.679 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 38.7072ms
2024-08-05 12:37:25.907 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:37:25.908 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:37:25.908 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:37:25.911 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:37:25.915 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:37:25.916 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:37:25.993 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:37:26.007 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:37:26.010 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:37:26.010 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:37:26.011 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:37:26.012 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:37:26.013 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:37:26.015 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:37:26.028 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 113.7034ms
2024-08-05 12:37:26.029 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:37:26.030 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:37:26.030 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 18.7702ms
2024-08-05 12:37:26.055 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:37:26.056 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:37:26.059 +07:00 [ERR] Connection id "0HN5L22JLFFTC", Request id "0HN5L22JLFFTC:00000007": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:37:26.059 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:37:26.072 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 165.1182ms
2024-08-05 12:37:26.080 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:37:26.081 +07:00 [ERR] Connection id "0HN5L22JLFFTC", Request id "0HN5L22JLFFTC:00000009": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:37:26.091 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 84.0897ms
2024-08-05 12:39:09.349 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:39:09.349 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:39:09.350 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:39:09.351 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:39:09.352 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:39:09.352 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:39:09.353 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:39:09.358 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:39:09.358 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 6.5937ms
2024-08-05 12:39:09.359 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:39:09.359 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:39:09.360 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:39:09.361 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:39:09.361 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:39:09.373 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:39:09.373 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:39:09.374 +07:00 [ERR] Connection id "0HN5L22JLFFTC", Request id "0HN5L22JLFFTC:0000000B": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:39:09.374 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:39:09.385 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 36.8569ms
2024-08-05 12:39:09.387 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:39:09.399 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:39:09.401 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:39:09.401 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 27.8441ms
2024-08-05 12:39:09.401 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:39:09.402 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:39:09.403 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:39:09.404 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:39:09.404 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:39:09.428 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:39:09.428 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:39:09.429 +07:00 [ERR] Connection id "0HN5L22JLFFTC", Request id "0HN5L22JLFFTC:0000000D": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:39:09.429 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:39:09.444 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 85.5015ms
2024-08-05 12:39:09.446 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 41.7704ms
2024-08-05 12:39:09.448 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:39:09.449 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:39:09.461 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:39:09.463 +07:00 [ERR] Connection id "0HN5L22JLFFTC", Request id "0HN5L22JLFFTC:0000000F": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:39:09.476 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 77.0821ms
2024-08-05 12:39:55.651 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 12:39:55.662 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 10.8345ms
2024-08-05 12:39:55.675 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 12:39:55.675 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 12:39:55.675 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 4.7073ms
2024-08-05 12:39:55.687 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 16.4612ms
2024-08-05 12:39:55.722 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 12:39:55.726 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 3.3974ms
2024-08-05 12:39:59.491 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:39:59.492 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:39:59.492 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:39:59.493 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:39:59.494 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:39:59.495 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:39:59.501 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 7.9387ms
2024-08-05 12:39:59.502 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:39:59.503 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:39:59.514 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:39:59.515 +07:00 [ERR] Connection id "0HN5L22JLFFTB", Request id "0HN5L22JLFFTB:00000011": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:39:59.528 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 36.8112ms
2024-08-05 12:40:00.580 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:40:00.581 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:00.584 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:40:00.585 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:40:00.585 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:40:00.587 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:40:00.590 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 5.39ms
2024-08-05 12:40:00.591 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:00.592 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:40:00.605 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:40:00.606 +07:00 [ERR] Connection id "0HN5L22JLFFTB", Request id "0HN5L22JLFFTB:00000013": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:40:00.617 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 37.9394ms
2024-08-05 12:40:07.284 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:40:07.285 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:07.285 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:40:07.286 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:40:07.287 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:40:07.288 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:40:07.294 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 8.2065ms
2024-08-05 12:40:07.295 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:07.296 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:40:07.307 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:40:07.308 +07:00 [ERR] Connection id "0HN5L22JLFFTB", Request id "0HN5L22JLFFTB:00000015": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:40:07.319 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 35.6484ms
2024-08-05 12:40:08.048 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:40:08.049 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:08.050 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:40:08.051 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:40:08.051 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:40:08.053 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:40:08.056 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 5.4097ms
2024-08-05 12:40:08.057 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:08.058 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:40:08.070 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:40:08.070 +07:00 [ERR] Connection id "0HN5L22JLFFTB", Request id "0HN5L22JLFFTB:00000017": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:40:08.082 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 33.8731ms
2024-08-05 12:40:08.849 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:40:08.858 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:08.858 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:40:08.859 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:40:08.860 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:40:08.861 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:40:08.868 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 8.7128ms
2024-08-05 12:40:08.868 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:08.869 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:40:08.880 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:40:08.880 +07:00 [ERR] Connection id "0HN5L22JLFFTB", Request id "0HN5L22JLFFTB:00000019": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:40:08.949 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 99.9682ms
2024-08-05 12:40:13.514 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:40:13.516 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:13.516 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:40:13.519 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:40:13.519 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:40:13.521 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:40:13.523 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 4.0277ms
2024-08-05 12:40:13.523 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:13.525 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:40:13.535 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:40:13.536 +07:00 [ERR] Connection id "0HN5L22JLFFTB", Request id "0HN5L22JLFFTB:0000001B": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:40:13.549 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 34.8532ms
2024-08-05 12:40:39.876 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:40:39.878 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:39.879 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:40:39.880 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:40:39.880 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:40:39.881 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:40:39.883 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.2554ms
2024-08-05 12:40:39.884 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:39.885 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:40:39.899 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:40:39.900 +07:00 [ERR] Connection id "0HN5L22JLFFTB", Request id "0HN5L22JLFFTB:0000001D": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:40:39.912 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 36.1198ms
2024-08-05 12:40:40.607 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:40:40.608 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:40.609 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:40:40.610 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:40:40.610 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:40:40.612 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:40:40.614 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 4.6408ms
2024-08-05 12:40:40.615 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:40.616 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:40:40.631 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:40:40.631 +07:00 [ERR] Connection id "0HN5L22JLFFTB", Request id "0HN5L22JLFFTB:0000001F": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:40:40.651 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 43.1889ms
2024-08-05 12:40:41.034 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:40:41.035 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:41.036 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:40:41.036 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:40:41.038 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:40:41.039 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:40:41.042 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 5.5846ms
2024-08-05 12:40:41.043 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:41.043 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:40:41.055 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:40:41.055 +07:00 [ERR] Connection id "0HN5L22JLFFTB", Request id "0HN5L22JLFFTB:00000021": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:40:41.067 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 33.4397ms
2024-08-05 12:40:41.401 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:40:41.405 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:41.406 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:40:41.407 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:40:41.408 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:40:41.409 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:40:41.412 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 4.9699ms
2024-08-05 12:40:41.413 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:41.414 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:40:41.425 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:40:41.427 +07:00 [ERR] Connection id "0HN5L22JLFFTB", Request id "0HN5L22JLFFTB:00000023": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:40:41.439 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 37.8453ms
2024-08-05 12:40:41.854 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:40:41.856 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:41.857 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:40:41.858 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:40:41.858 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:40:41.860 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:40:41.868 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 10.7846ms
2024-08-05 12:40:41.869 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:41.870 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:40:41.882 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:40:41.882 +07:00 [ERR] Connection id "0HN5L22JLFFTB", Request id "0HN5L22JLFFTB:00000025": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:40:41.894 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 39.4019ms
2024-08-05 12:40:52.112 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:40:52.114 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:40:52.114 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:40:55.160 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:40:55.609 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:41:50.599 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:41:50.627 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 58511.9133ms
2024-08-05 12:41:50.629 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:41:50.630 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:41:50.647 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:41:50.648 +07:00 [ERR] Connection id "0HN5L22JLFFTB", Request id "0HN5L22JLFFTB:00000027": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:41:50.665 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 58553.0848ms
2024-08-05 12:50:11.204 +07:00 [INF] Application Starting
2024-08-05 12:50:11.914 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:50:12.017 +07:00 [INF] Saved 14 entities to in-memory store.
2024-08-05 12:50:12.025 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 12:50:12.159 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 12:50:12.160 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 12:50:12.161 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 12:50:12.162 +07:00 [INF] Hosting environment: Development
2024-08-05 12:50:12.162 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 12:50:12.645 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 12:50:12.884 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 241.7553ms
2024-08-05 12:50:12.892 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 12:50:12.892 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 12:50:12.898 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 6.0642ms
2024-08-05 12:50:12.942 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 50.5601ms
2024-08-05 12:50:13.011 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 12:50:13.098 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 86.1440ms
2024-08-05 12:50:16.483 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:50:16.508 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:50:16.523 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:50:16.531 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:50:16.539 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:50:16.790 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:50:16.845 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 316.5864ms
2024-08-05 12:50:16.847 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:50:16.853 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:50:16.882 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:50:16.885 +07:00 [ERR] Connection id "0HN5L29SGU8I8", Request id "0HN5L29SGU8I8:00000009": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:50:16.901 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 417.3208ms
2024-08-05 12:50:32.402 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:50:32.405 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:50:32.405 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:50:32.409 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:50:32.434 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:50:59.890 +07:00 [INF] Application Starting
2024-08-05 12:51:00.602 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:51:00.705 +07:00 [INF] Saved 14 entities to in-memory store.
2024-08-05 12:51:00.713 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 12:51:00.924 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 12:51:00.925 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 12:51:00.925 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 12:51:00.926 +07:00 [INF] Hosting environment: Development
2024-08-05 12:51:00.926 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 12:51:01.096 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 12:51:01.334 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 240.5218ms
2024-08-05 12:51:01.341 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 12:51:01.341 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 12:51:01.344 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 3.1099ms
2024-08-05 12:51:01.381 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 40.2842ms
2024-08-05 12:51:01.410 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 12:51:01.499 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 89.2355ms
2024-08-05 12:51:04.792 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:51:04.817 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:51:04.832 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:51:04.840 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:51:04.848 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:51:05.097 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:51:05.144 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 306.9442ms
2024-08-05 12:51:05.146 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:51:05.152 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:51:05.191 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:51:05.195 +07:00 [ERR] Connection id "0HN5L2AAUREFU", Request id "0HN5L2AAUREFU:00000009": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:51:05.219 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 427.4083ms
2024-08-05 12:52:09.183 +07:00 [INF] Application Starting
2024-08-05 12:52:09.930 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:52:10.021 +07:00 [INF] Saved 14 entities to in-memory store.
2024-08-05 12:52:10.028 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 12:52:10.163 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 12:52:10.165 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 12:52:10.165 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 12:52:10.166 +07:00 [INF] Hosting environment: Development
2024-08-05 12:52:10.166 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 12:52:10.614 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 12:52:10.849 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 237.8504ms
2024-08-05 12:52:10.858 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 12:52:10.859 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 12:52:10.864 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 5.8713ms
2024-08-05 12:52:10.900 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 41.0039ms
2024-08-05 12:52:10.930 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 12:52:11.012 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 82.0862ms
2024-08-05 12:52:14.373 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:52:14.399 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:52:14.416 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:52:14.424 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:52:14.432 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:53:14.207 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:53:14.246 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 59825.1954ms
2024-08-05 12:53:14.249 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:53:14.253 +07:00 [ERR] An unhandled exception has occurred while executing the request.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
2024-08-05 12:53:14.278 +07:00 [WRN] The response has already started, the error page middleware will not be executed.
2024-08-05 12:53:14.281 +07:00 [ERR] Connection id "0HN5L2AVM19D3", Request id "0HN5L2AVM19D3:00000009": An unhandled exception was thrown by the application.
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.Stock.Product.ProductId.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-08-05 12:53:14.294 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 59920.5008ms
2024-08-05 12:54:56.356 +07:00 [INF] Application Starting
2024-08-05 12:54:57.119 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:54:57.212 +07:00 [INF] Saved 14 entities to in-memory store.
2024-08-05 12:54:57.221 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 12:54:57.354 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 12:54:57.355 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 12:54:57.356 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 12:54:57.356 +07:00 [INF] Hosting environment: Development
2024-08-05 12:54:57.357 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 12:54:57.980 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 12:54:58.227 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 249.9560ms
2024-08-05 12:54:58.232 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 12:54:58.233 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 12:54:58.236 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 3.1106ms
2024-08-05 12:54:58.273 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 40.8146ms
2024-08-05 12:54:58.304 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 12:54:58.389 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 85.3879ms
2024-08-05 12:55:02.597 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:55:02.622 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:55:02.639 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:55:02.649 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:55:02.658 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:55:08.729 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:55:08.786 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 6140.3979ms
2024-08-05 12:55:08.788 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:55:08.793 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 6195.7062ms
2024-08-05 12:55:29.251 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 12:55:29.259 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:55:29.261 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 12:55:29.275 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 12:55:29.297 +07:00 [INF] Fetching user with Username: audi
2024-08-05 12:55:29.316 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:55:29.349 +07:00 [WRN] User with Username: audi and provided PasswordHash not found.
2024-08-05 12:55:29.351 +07:00 [INF] Executing ObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ProblemDetails'.
2024-08-05 12:55:29.357 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 80.7533ms
2024-08-05 12:55:29.361 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 12:55:29.361 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 404 - application/problem+json;+charset=utf-8 110.4867ms
2024-08-05 12:55:45.423 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Users - -
2024-08-05 12:55:45.424 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:55:45.425 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Users - - - 204 - - 2.6591ms
2024-08-05 12:55:45.428 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Users application/json 72
2024-08-05 12:55:45.429 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:55:45.429 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 12:55:45.433 +07:00 [INF] Route matched with {action = "PostUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] PostUser(webapi_shopping_interview.Model.User) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 12:55:45.466 +07:00 [INF] Creating a new user.
2024-08-05 12:55:45.467 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:55:45.504 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 12:55:45.511 +07:00 [INF] User with ID: 1 created successfully.
2024-08-05 12:55:45.512 +07:00 [INF] Executing CreatedAtActionResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 12:55:45.534 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview) in 100.1562ms
2024-08-05 12:55:45.536 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 12:55:45.536 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Users application/json 72 - 201 - application/json;+charset=utf-8 108.3712ms
2024-08-05 12:55:54.444 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 12:55:54.445 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:55:54.448 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 12:55:54.448 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 12:55:54.450 +07:00 [INF] Fetching user with Username: audi
2024-08-05 12:55:54.451 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:55:54.455 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 12:55:54.456 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 6.0061ms
2024-08-05 12:55:54.457 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 12:55:54.457 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 13.4753ms
2024-08-05 12:55:54.675 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:55:54.677 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:55:54.678 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:55:54.679 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:55:54.683 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:55:54.684 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:56:04.710 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:56:04.718 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:56:04.719 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 10036.782ms
2024-08-05 12:56:04.722 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:56:04.723 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:56:04.723 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:56:04.724 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 10048.8658ms
2024-08-05 12:56:04.725 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:56:04.727 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:56:04.728 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:56:04.730 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:56:04.733 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 5.9373ms
2024-08-05 12:56:04.734 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:56:04.735 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 16.5516ms
2024-08-05 12:57:39.937 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:57:39.938 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:57:39.939 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:57:39.939 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:57:39.941 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:57:39.942 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:57:39.945 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:57:39.947 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 6.0121ms
2024-08-05 12:57:39.950 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:57:39.954 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 17.4098ms
2024-08-05 12:57:39.955 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 12:57:39.959 +07:00 [INF] CORS policy execution successful.
2024-08-05 12:57:39.960 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:57:39.961 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 12:57:39.963 +07:00 [INF] Fetching all products from the database.
2024-08-05 12:57:39.963 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 12:57:39.966 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 12:57:39.969 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 6.3809ms
2024-08-05 12:57:39.973 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 12:57:39.974 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 19.1986ms
2024-08-05 13:01:02.638 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:01:02.642 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:01:02.642 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:01:02.643 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:01:02.645 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:01:02.646 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:01:02.648 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:01:02.650 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 4.9712ms
2024-08-05 13:01:02.651 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:01:02.653 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:01:02.654 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 15.2472ms
2024-08-05 13:01:02.654 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:01:02.655 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:01:02.656 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:01:02.658 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:01:02.659 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:01:02.661 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:01:02.665 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 6.6416ms
2024-08-05 13:01:02.668 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:01:02.669 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 15.5154ms
2024-08-05 13:01:09.712 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:01:09.715 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:01:09.716 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:01:09.717 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:01:09.718 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:01:09.718 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:01:09.719 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:01:09.722 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 4.7989ms
2024-08-05 13:01:09.723 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:01:09.724 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:01:09.724 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:01:09.725 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 13.0015ms
2024-08-05 13:01:09.725 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:01:09.726 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:01:09.728 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:01:09.729 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:01:09.730 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:01:09.732 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 4.0223ms
2024-08-05 13:01:09.733 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:01:09.734 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 10.5233ms
2024-08-05 13:07:59.697 +07:00 [INF] Application Starting
2024-08-05 13:08:00.376 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:08:00.471 +07:00 [INF] Saved 14 entities to in-memory store.
2024-08-05 13:08:00.479 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 13:08:00.628 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 13:08:00.628 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 13:08:00.629 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 13:08:00.629 +07:00 [INF] Hosting environment: Development
2024-08-05 13:08:00.630 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 13:08:01.192 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 13:08:01.429 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 241.0255ms
2024-08-05 13:08:01.429 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 13:08:01.431 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 13:08:01.452 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 22.6658ms
2024-08-05 13:08:01.495 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 63.6959ms
2024-08-05 13:08:01.545 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 13:08:01.625 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 80.0244ms
2024-08-05 13:08:06.869 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:08:06.902 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:08:06.927 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:08:06.940 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:08:06.967 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:08:07.549 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:08:07.725 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 791.5317ms
2024-08-05 13:08:07.753 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:08:07.759 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 890.0919ms
2024-08-05 13:08:33.269 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:08:33.276 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:08:33.277 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:08:33.278 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:08:33.281 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:08:33.304 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:08:33.309 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:08:33.311 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 31.5617ms
2024-08-05 13:08:33.313 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:08:33.317 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:08:33.318 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 48.5555ms
2024-08-05 13:08:33.318 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:08:33.319 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:08:33.319 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:08:33.321 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:08:33.321 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:08:33.323 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:08:33.333 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 12.5175ms
2024-08-05 13:08:33.341 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:08:33.342 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 24.3345ms
2024-08-05 13:10:19.962 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:10:19.963 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:10:19.964 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:10:19.964 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:10:19.965 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:10:19.966 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:10:19.968 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:10:19.969 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.6601ms
2024-08-05 13:10:19.971 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:10:19.971 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:10:19.972 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 9.8834ms
2024-08-05 13:10:19.973 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:10:19.973 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:10:19.974 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:10:19.975 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:10:19.975 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:10:19.977 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:10:19.978 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.1753ms
2024-08-05 13:10:19.979 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:10:19.980 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 8.0318ms
2024-08-05 13:11:45.434 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:11:45.434 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:11:45.435 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:11:45.436 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:11:45.437 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:11:45.437 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:11:45.440 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:11:45.449 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 12.6606ms
2024-08-05 13:11:45.453 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:11:45.454 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:11:45.454 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:11:45.455 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 21.3088ms
2024-08-05 13:11:45.455 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:11:45.456 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:11:45.457 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:11:45.457 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:11:45.459 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:11:45.460 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.5827ms
2024-08-05 13:11:45.461 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:11:45.462 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 8.9697ms
2024-08-05 13:12:34.093 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:12:34.094 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:12:34.096 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:12:34.097 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:12:34.099 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:12:34.100 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:12:34.101 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:12:34.103 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 4.0545ms
2024-08-05 13:12:34.103 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:12:34.106 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 13.2948ms
2024-08-05 13:12:34.106 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:12:34.110 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:12:34.110 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:12:34.111 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:12:34.112 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:12:34.113 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:12:34.114 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:12:34.115 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.4989ms
2024-08-05 13:12:34.116 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:12:34.117 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 10.1926ms
2024-08-05 13:15:34.284 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:15:34.290 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:15:34.290 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:15:34.291 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:15:34.292 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:15:34.292 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:15:34.294 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:15:34.298 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:15:34.298 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 6.4045ms
2024-08-05 13:15:34.305 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:15:34.306 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:15:34.307 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:15:34.308 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 23.1022ms
2024-08-05 13:15:34.308 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:15:34.310 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:15:34.311 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:15:34.313 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:15:34.314 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 4.1531ms
2024-08-05 13:15:34.315 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:15:34.316 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 17.6416ms
2024-08-05 13:15:42.208 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 13:15:42.209 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:15:42.210 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 13:15:42.223 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:15:42.249 +07:00 [INF] Fetching user with Username: audi
2024-08-05 13:15:42.250 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:15:42.291 +07:00 [WRN] User with Username: audi and provided PasswordHash not found.
2024-08-05 13:15:42.292 +07:00 [INF] Executing ObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ProblemDetails'.
2024-08-05 13:15:42.300 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 74.5374ms
2024-08-05 13:15:42.306 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 13:15:42.306 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 404 - application/problem+json;+charset=utf-8 98.0263ms
2024-08-05 13:15:54.457 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Users - -
2024-08-05 13:15:54.458 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:15:54.460 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Users - - - 204 - - 2.4799ms
2024-08-05 13:15:54.461 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Users application/json 72
2024-08-05 13:15:54.462 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:15:54.462 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 13:15:54.465 +07:00 [INF] Route matched with {action = "PostUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] PostUser(webapi_shopping_interview.Model.User) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:15:54.505 +07:00 [INF] Creating a new user.
2024-08-05 13:15:54.506 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:15:54.545 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 13:15:54.550 +07:00 [INF] User with ID: 1 created successfully.
2024-08-05 13:15:54.552 +07:00 [INF] Executing CreatedAtActionResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 13:15:54.571 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview) in 104.9239ms
2024-08-05 13:15:54.576 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 13:15:54.577 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Users application/json 72 - 201 - application/json;+charset=utf-8 115.5887ms
2024-08-05 13:16:01.881 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 13:16:01.882 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:16:01.882 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 13:16:01.883 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:16:01.885 +07:00 [INF] Fetching user with Username: audi
2024-08-05 13:16:01.886 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:16:01.888 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 13:16:01.889 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 4.3134ms
2024-08-05 13:16:01.890 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 13:16:01.891 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 9.4872ms
2024-08-05 13:16:01.939 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:16:01.940 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:16:01.942 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:16:01.943 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:16:01.943 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:16:01.944 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:16:01.946 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:16:01.950 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 6.2444ms
2024-08-05 13:16:01.953 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:16:01.953 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 13.9464ms
2024-08-05 13:16:01.954 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:16:01.957 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:16:01.958 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:16:01.959 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:16:01.960 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:16:01.961 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:16:01.962 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:16:01.964 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.3578ms
2024-08-05 13:16:01.964 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:16:01.965 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 11.1492ms
2024-08-05 13:16:21.701 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:16:21.703 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:16:21.703 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:16:21.704 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:16:21.705 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:16:21.705 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:16:21.707 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:16:21.708 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.305ms
2024-08-05 13:16:21.711 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:16:21.712 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:16:21.712 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:16:21.713 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 11.6502ms
2024-08-05 13:16:21.713 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:16:21.714 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:16:21.715 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:16:21.716 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:16:21.717 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:16:21.719 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.5366ms
2024-08-05 13:16:21.719 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:16:21.720 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 8.4865ms
2024-08-05 13:19:04.941 +07:00 [INF] Application Starting
2024-08-05 13:19:05.625 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:19:05.701 +07:00 [INF] Saved 7 entities to in-memory store.
2024-08-05 13:19:05.715 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 13:19:05.851 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 13:19:05.851 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 13:19:05.852 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 13:19:05.853 +07:00 [INF] Hosting environment: Development
2024-08-05 13:19:05.853 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 13:19:06.049 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 13:19:06.294 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 247.2351ms
2024-08-05 13:19:06.296 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 13:19:06.296 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 13:19:06.304 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 8.3093ms
2024-08-05 13:19:06.341 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 44.8581ms
2024-08-05 13:19:06.372 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 13:19:06.452 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 79.2442ms
2024-08-05 13:19:22.499 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:19:22.539 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:19:22.562 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:19:22.573 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:19:22.583 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:19:22.982 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:19:23.095 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 527.3881ms
2024-08-05 13:19:23.096 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:19:23.101 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 601.6184ms
2024-08-05 13:22:37.356 +07:00 [INF] Application Starting
2024-08-05 13:22:38.053 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:22:38.141 +07:00 [INF] Saved 14 entities to in-memory store.
2024-08-05 13:22:38.150 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 13:22:38.284 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 13:22:38.286 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 13:22:38.286 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 13:22:38.287 +07:00 [INF] Hosting environment: Development
2024-08-05 13:22:38.287 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 13:22:38.886 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 13:22:39.134 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 250.7272ms
2024-08-05 13:22:39.136 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 13:22:39.136 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 13:22:39.143 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 6.9395ms
2024-08-05 13:22:39.179 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 43.3792ms
2024-08-05 13:22:39.209 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 13:22:39.286 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 76.2202ms
2024-08-05 13:22:43.369 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:22:43.392 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:22:43.410 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:22:43.419 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:22:43.424 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:22:43.670 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:22:43.715 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 299.6718ms
2024-08-05 13:22:43.718 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:22:43.721 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 351.6876ms
2024-08-05 13:24:41.107 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:24:41.114 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:24:41.115 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:24:41.116 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:24:41.118 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:24:41.143 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:24:41.148 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:24:41.170 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:24:41.178 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:24:41.179 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:24:41.179 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:24:41.180 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:24:41.181 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:24:41.184 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:24:41.218 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 101.5304ms
2024-08-05 13:24:41.233 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:24:41.222 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 41.5378ms
2024-08-05 13:24:41.238 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 130.9060ms
2024-08-05 13:24:41.238 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:24:41.240 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 69.6053ms
2024-08-05 13:25:24.695 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 13:25:24.696 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:25:24.697 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 13:25:24.716 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:25:24.736 +07:00 [INF] Fetching user with Username: audi
2024-08-05 13:25:24.737 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:25:24.771 +07:00 [WRN] User with Username: audi and provided PasswordHash not found.
2024-08-05 13:25:24.774 +07:00 [INF] Executing ObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ProblemDetails'.
2024-08-05 13:25:24.783 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 65.5575ms
2024-08-05 13:25:24.825 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 13:25:24.826 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 404 - application/problem+json;+charset=utf-8 130.2957ms
2024-08-05 13:25:35.809 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Users - -
2024-08-05 13:25:35.811 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:25:35.813 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Users - - - 204 - - 3.6865ms
2024-08-05 13:25:35.822 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Users application/json 72
2024-08-05 13:25:35.826 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:25:35.827 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 13:25:35.830 +07:00 [INF] Route matched with {action = "PostUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] PostUser(webapi_shopping_interview.Model.User) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:25:35.864 +07:00 [INF] Creating a new user.
2024-08-05 13:25:35.866 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:25:35.907 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 13:25:35.939 +07:00 [INF] User with ID: 1 created successfully.
2024-08-05 13:25:35.940 +07:00 [INF] Executing CreatedAtActionResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 13:25:35.969 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview) in 137.2804ms
2024-08-05 13:25:35.971 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 13:25:35.972 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Users application/json 72 - 201 - application/json;+charset=utf-8 150.4924ms
2024-08-05 13:25:44.348 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 13:25:44.349 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:25:44.349 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 13:25:44.350 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:25:44.351 +07:00 [INF] Fetching user with Username: audi
2024-08-05 13:25:44.352 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:25:44.354 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 13:25:44.355 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 4.4627ms
2024-08-05 13:25:44.356 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 13:25:44.357 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 9.1574ms
2024-08-05 13:25:44.406 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:25:44.407 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:25:44.407 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:25:44.408 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:25:44.408 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:25:44.409 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:25:44.410 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:25:44.415 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 6.5629ms
2024-08-05 13:25:44.420 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:25:44.423 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:25:44.423 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:25:44.424 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 17.8493ms
2024-08-05 13:25:44.424 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:25:44.425 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:25:44.426 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:25:44.426 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:25:44.428 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:25:44.430 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 3.9675ms
2024-08-05 13:25:44.430 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:25:44.431 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 10.5941ms
2024-08-05 13:26:28.764 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:26:28.802 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:26:28.802 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:26:28.803 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:26:28.803 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:26:28.804 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:26:28.805 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:26:28.842 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 38.234ms
2024-08-05 13:26:28.867 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:26:28.873 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 109.0791ms
2024-08-05 13:26:28.862 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:26:28.874 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:26:28.874 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:26:28.875 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:26:28.875 +07:00 [INF] Fetching all products and their stocks from the database.
2024-08-05 13:26:28.876 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:26:28.879 +07:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:26:28.916 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 40.7131ms
2024-08-05 13:26:28.925 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:26:28.927 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 64.8532ms
2024-08-05 13:27:59.531 +07:00 [INF] Application Starting
2024-08-05 13:28:00.245 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:28:00.331 +07:00 [INF] Saved 7 entities to in-memory store.
2024-08-05 13:28:00.337 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 13:28:00.478 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 13:28:00.479 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 13:28:00.480 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 13:28:00.480 +07:00 [INF] Hosting environment: Development
2024-08-05 13:28:00.481 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 13:28:00.930 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 13:28:01.161 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 233.9736ms
2024-08-05 13:28:01.164 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 13:28:01.164 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 13:28:01.180 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 15.5015ms
2024-08-05 13:28:01.215 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 51.3632ms
2024-08-05 13:28:01.252 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 13:28:01.326 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 74.2877ms
2024-08-05 13:28:07.602 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:28:07.638 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:28:07.644 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:28:07.669 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:28:07.681 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:28:07.690 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:28:07.948 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:28:08.012 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:28:08.013 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:28:08.014 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:28:08.014 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:28:08.017 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:28:08.018 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 341.45ms
2024-08-05 13:28:08.020 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:28:08.023 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 420.8804ms
2024-08-05 13:28:08.039 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:28:08.042 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:28:08.043 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 27.2016ms
2024-08-05 13:28:08.044 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:28:08.044 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 32.2994ms
2024-08-05 13:28:19.611 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Users - -
2024-08-05 13:28:19.612 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:28:19.614 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Users - - - 204 - - 2.8230ms
2024-08-05 13:28:19.615 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Users application/json 72
2024-08-05 13:28:19.616 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:28:19.617 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 13:28:19.630 +07:00 [INF] Route matched with {action = "PostUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] PostUser(webapi_shopping_interview.Model.User) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:28:19.676 +07:00 [INF] Creating a new user.
2024-08-05 13:28:19.679 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:28:19.984 +07:00 [INF] Saved 1 entities to in-memory store.
2024-08-05 13:28:19.997 +07:00 [INF] User with ID: 1 created successfully.
2024-08-05 13:28:20.008 +07:00 [INF] Executing CreatedAtActionResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 13:28:20.063 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview) in 430.7348ms
2024-08-05 13:28:20.064 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 13:28:20.065 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Users application/json 72 - 201 - application/json;+charset=utf-8 449.9761ms
2024-08-05 13:28:26.764 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 13:28:26.765 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:28:26.766 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 13:28:26.769 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:28:26.778 +07:00 [INF] Fetching user with Username: audi
2024-08-05 13:28:26.779 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:28:26.787 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 13:28:26.788 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 18.1536ms
2024-08-05 13:28:26.789 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 13:28:26.790 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 25.6537ms
2024-08-05 13:28:26.836 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:28:26.837 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:28:26.838 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:28:26.838 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:28:26.839 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:28:26.839 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:28:26.841 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:28:26.850 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:28:26.899 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:28:26.899 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:28:26.900 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:28:26.900 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:28:26.901 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:28:26.902 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:28:26.908 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 69.0891ms
2024-08-05 13:28:26.934 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 34.0165ms
2024-08-05 13:28:26.939 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:28:26.939 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:28:26.942 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 91.8559ms
2024-08-05 13:28:26.942 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 105.1132ms
2024-08-05 13:28:51.317 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api - -
2024-08-05 13:28:51.325 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api - - - 404 0 - 7.5280ms
2024-08-05 13:29:12.655 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 13:29:12.657 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 2.3307ms
2024-08-05 13:29:12.670 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 13:29:12.670 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 13:29:12.671 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 1.1250ms
2024-08-05 13:29:12.684 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 14.1844ms
2024-08-05 13:29:12.728 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 13:29:12.732 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 4.4220ms
2024-08-05 13:33:21.757 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Users - -
2024-08-05 13:33:21.760 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:33:21.761 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Users - - - 204 - - 3.5956ms
2024-08-05 13:33:21.763 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Users application/json 72
2024-08-05 13:33:21.764 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:33:21.764 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 13:33:21.765 +07:00 [INF] Route matched with {action = "PostUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] PostUser(webapi_shopping_interview.Model.User) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:33:21.766 +07:00 [INF] Creating a new user.
2024-08-05 13:33:21.767 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:33:21.771 +07:00 [WRN] User with username: audi already exists.
2024-08-05 13:33:21.772 +07:00 [INF] Executing ConflictObjectResult, writing value of type '<>f__AnonymousType1`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-08-05 13:33:21.779 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview) in 13.1168ms
2024-08-05 13:33:21.780 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 13:33:21.780 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Users application/json 72 - 409 - application/json;+charset=utf-8 16.9109ms
2024-08-05 13:33:30.485 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 13:33:30.485 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:33:30.486 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 13:33:30.486 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:33:30.488 +07:00 [INF] Fetching user with Username: audi
2024-08-05 13:33:30.489 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:33:30.490 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 13:33:30.491 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 2.7148ms
2024-08-05 13:33:30.491 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 13:33:30.492 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 7.5292ms
2024-08-05 13:33:30.534 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:33:30.535 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:33:30.535 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:33:30.535 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:33:30.536 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:33:30.537 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:33:30.538 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:33:30.551 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:33:30.553 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:33:30.556 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:33:30.565 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 28.5757ms
2024-08-05 13:33:30.569 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:33:30.570 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:33:30.571 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:33:30.571 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 37.5216ms
2024-08-05 13:33:30.572 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:33:30.574 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:33:30.577 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 6.8474ms
2024-08-05 13:33:30.579 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:33:30.582 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 31.1384ms
2024-08-05 13:34:14.066 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:34:14.069 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:34:14.069 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:34:14.070 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:34:14.071 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:34:14.072 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:34:14.073 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:34:14.081 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:34:14.088 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 16.5812ms
2024-08-05 13:34:14.093 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:34:14.096 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:34:14.097 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:34:14.098 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:34:14.098 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 31.9136ms
2024-08-05 13:34:14.099 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:34:14.100 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:34:14.101 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:34:14.105 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 6.0019ms
2024-08-05 13:34:14.108 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:34:14.108 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 26.9244ms
2024-08-05 13:35:09.694 +07:00 [INF] Application Starting
2024-08-05 13:35:10.396 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:35:10.481 +07:00 [INF] Saved 7 entities to in-memory store.
2024-08-05 13:35:10.489 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 13:35:10.623 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 13:35:10.623 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 13:35:10.624 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 13:35:10.625 +07:00 [INF] Hosting environment: Development
2024-08-05 13:35:10.625 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 13:35:11.130 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 13:35:11.378 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 251.6285ms
2024-08-05 13:35:11.384 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 13:35:11.384 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 13:35:11.387 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 2.8693ms
2024-08-05 13:35:11.421 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 37.4696ms
2024-08-05 13:35:11.450 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 13:35:11.536 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 85.6664ms
2024-08-05 13:35:15.698 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:35:15.725 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:35:15.744 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:35:15.751 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:35:15.759 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:35:15.893 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:35:15.928 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 179.1999ms
2024-08-05 13:35:15.931 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:35:15.934 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 235.7220ms
2024-08-05 13:35:36.441 +07:00 [INF] Application Starting
2024-08-05 13:35:37.155 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:35:37.242 +07:00 [INF] Saved 7 entities to in-memory store.
2024-08-05 13:35:37.249 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 13:35:37.413 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 13:35:37.414 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 13:35:37.415 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 13:35:37.415 +07:00 [INF] Hosting environment: Development
2024-08-05 13:35:37.416 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 13:35:37.787 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 13:35:38.026 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 242.5227ms
2024-08-05 13:35:38.028 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 13:35:38.028 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 13:35:38.038 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 9.9996ms
2024-08-05 13:35:38.077 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 48.6496ms
2024-08-05 13:35:38.103 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 13:35:38.181 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 77.6990ms
2024-08-05 13:36:40.230 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.InMemory:6.0.0' with options: StoreName=Interview 
2024-08-05 13:36:54.009 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:36:54.191 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:36:54.197 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:36:54.262 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:36:54.464 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:36:54.469 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:36:54.470 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:37:03.442 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:37:03.467 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:37:03.468 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:37:03.535 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:37:03.707 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:37:03.708 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:37:03.709 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:37:03.924 +07:00 [INF] Executed DbCommand (185ms) [Parameters=[], CommandType='"Text"', CommandTimeout='60']
CREATE DATABASE [Interview3];
2024-08-05 13:37:04.016 +07:00 [INF] Executed DbCommand (61ms) [Parameters=[], CommandType='"Text"', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [Interview3] SET READ_COMMITTED_SNAPSHOT ON;
END;
2024-08-05 13:37:04.027 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2024-08-05 13:37:04.086 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [__EFMigrationsHistory] (
    [MigrationId] nvarchar(150) NOT NULL,
    [ProductVersion] nvarchar(32) NOT NULL,
    CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
);
2024-08-05 13:37:04.090 +07:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2024-08-05 13:37:04.102 +07:00 [INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
2024-08-05 13:37:04.109 +07:00 [INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [MigrationId], [ProductVersion]
FROM [__EFMigrationsHistory]
ORDER BY [MigrationId];
2024-08-05 13:37:04.124 +07:00 [INF] Applying migration '20240805063654_InitialCreate'.
2024-08-05 13:37:04.160 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [Orders] (
    [OrderId] int NOT NULL IDENTITY,
    [UserId] int NOT NULL,
    [Total] decimal(18,2) NOT NULL,
    [OrderDate] datetime2 NOT NULL,
    [Status] nvarchar(max) NOT NULL,
    CONSTRAINT [PK_Orders] PRIMARY KEY ([OrderId])
);
2024-08-05 13:37:04.163 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [Products] (
    [ProductId] int NOT NULL IDENTITY,
    [Name] nvarchar(max) NOT NULL,
    [Description] nvarchar(max) NOT NULL,
    [Price] decimal(18,2) NOT NULL,
    [Stock] int NOT NULL,
    [Image] varbinary(max) NOT NULL,
    [CreatedAt] datetime2 NOT NULL,
    [UpdatedAt] datetime2 NOT NULL,
    CONSTRAINT [PK_Products] PRIMARY KEY ([ProductId])
);
2024-08-05 13:37:04.165 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [Users] (
    [UserId] int NOT NULL IDENTITY,
    [Username] nvarchar(max) NOT NULL,
    [PasswordHash] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NOT NULL,
    [CreatedAt] datetime2 NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([UserId])
);
2024-08-05 13:37:04.168 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [OrderItems] (
    [OrderItemId] int NOT NULL IDENTITY,
    [OrderId] int NOT NULL,
    [ProductId] int NOT NULL,
    [Quantity] int NOT NULL,
    [Price] decimal(18,2) NOT NULL,
    CONSTRAINT [PK_OrderItems] PRIMARY KEY ([OrderItemId]),
    CONSTRAINT [FK_OrderItems_Orders_OrderId] FOREIGN KEY ([OrderId]) REFERENCES [Orders] ([OrderId]) ON DELETE CASCADE,
    CONSTRAINT [FK_OrderItems_Products_ProductId] FOREIGN KEY ([ProductId]) REFERENCES [Products] ([ProductId]) ON DELETE CASCADE
);
2024-08-05 13:37:04.201 +07:00 [INF] Executed DbCommand (32ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'ProductId', N'CreatedAt', N'Description', N'Image', N'Name', N'Price', N'Stock', N'UpdatedAt') AND [object_id] = OBJECT_ID(N'[Products]'))
    SET IDENTITY_INSERT [Products] ON;
INSERT INTO [Products] ([ProductId], [CreatedAt], [Description], [Image], [Name], [Price], [Stock], [UpdatedAt])
VALUES (1, '2024-07-31T01:29:40.0490000', N'coke', coke', 10.0, 69, '2024-08-01T21:47:30.2253321'),
(2, '2024-07-31T01:35:04.4450000', N'pepsi', pepsi', 20.0, 85, '2024-08-01T21:47:30.2155640'),
(3, '2024-07-31T01:35:04.4450000', N'pepsi(1000ml)', pepsi(1000ml)', 30.0, 82, '2024-08-01T21:47:30.2059936'),
(4, '2024-07-31T01:35:04.4450000', N'coke(1000ml)', 0xcoke(1000ml)', 30.0, 76, '2024-08-01T21:47:30.1954431'),
(5, '2024-07-31T01:35:04.4450000', N'green tea', green tea', 40.0, 81, '2024-08-01T21:47:30.1864804'),
(6, '2024-07-31T01:35:04.4450000', N'thai tea', thai tea', 50.0, 83, '2024-08-01T21:47:30.1757295'),
(7, '2024-07-31T01:35:04.4450000', N'coke(taste)', coke(taste)', 0.0, 0, '0001-01-01T00:00:00.0000000');
IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'ProductId', N'CreatedAt', N'Description', N'Image', N'Name', N'Price', N'Stock', N'UpdatedAt') AND [object_id] = OBJECT_ID(N'[Products]'))
    SET IDENTITY_INSERT [Products] OFF;
2024-08-05 13:37:04.225 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX [IX_OrderItems_OrderId] ON [OrderItems] ([OrderId]);
2024-08-05 13:37:04.226 +07:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX [IX_OrderItems_ProductId] ON [OrderItems] ([ProductId]);
2024-08-05 13:37:04.228 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20240805063654_InitialCreate', N'6.0.0');
2024-08-05 13:37:07.513 +07:00 [INF] Application Starting
2024-08-05 13:37:08.300 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:37:08.304 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:37:08.305 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:37:08.405 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:37:08.687 +07:00 [INF] Executed DbCommand (17ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2024-08-05 13:37:08.743 +07:00 [INF] Executed DbCommand (39ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']

IF EXISTS
    (SELECT *
     FROM [sys].[objects] o
     WHERE [o].[type] = 'U'
     AND [o].[is_ms_shipped] = 0
     AND NOT EXISTS (SELECT *
         FROM [sys].[extended_properties] AS [ep]
         WHERE [ep].[major_id] = [o].[object_id]
             AND [ep].[minor_id] = 0
             AND [ep].[class] = 1
             AND [ep].[name] = N'microsoft_database_tools_support'
    )
)
SELECT 1 ELSE SELECT 0
2024-08-05 13:37:08.747 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 13:37:08.873 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 13:37:08.874 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 13:37:08.874 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 13:37:08.875 +07:00 [INF] Hosting environment: Development
2024-08-05 13:37:08.875 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 13:37:09.102 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 13:37:09.341 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 242.4299ms
2024-08-05 13:37:09.348 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 13:37:09.348 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 13:37:09.352 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 3.5946ms
2024-08-05 13:37:09.395 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 46.4572ms
2024-08-05 13:37:09.424 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 13:37:09.506 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 81.9767ms
2024-08-05 13:37:30.482 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Users - -
2024-08-05 13:37:30.524 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:37:30.526 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Users - - - 204 - - 44.2812ms
2024-08-05 13:37:30.531 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Users application/json 72
2024-08-05 13:37:30.533 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:37:30.538 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 13:37:30.574 +07:00 [INF] Route matched with {action = "PostUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] PostUser(webapi_shopping_interview.Model.User) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:37:30.649 +07:00 [INF] Creating a new user.
2024-08-05 13:37:30.657 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:37:31.361 +07:00 [INF] Executed DbCommand (118ms) [Parameters=[@__user_Username_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[CreatedAt], [u].[Email], [u].[PasswordHash], [u].[Username]
FROM [Users] AS [u]
WHERE [u].[Username] = @__user_Username_0
2024-08-05 13:37:31.633 +07:00 [INF] Executed DbCommand (25ms) [Parameters=[@p0='?' (DbType = DateTime2), @p1='?' (Size = 4000), @p2='?' (Size = 4000), @p3='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Users] ([CreatedAt], [Email], [PasswordHash], [Username])
VALUES (@p0, @p1, @p2, @p3);
SELECT [UserId]
FROM [Users]
WHERE @@ROWCOUNT = 1 AND [UserId] = scope_identity();
2024-08-05 13:37:31.683 +07:00 [INF] User with ID: 1 created successfully.
2024-08-05 13:37:31.692 +07:00 [INF] Executing CreatedAtActionResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 13:37:31.745 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview) in 1163.8419ms
2024-08-05 13:37:31.748 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.PostUser (webapi-shopping-interview)'
2024-08-05 13:37:31.757 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Users application/json 72 - 201 - application/json;+charset=utf-8 1226.0753ms
2024-08-05 13:37:40.520 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 13:37:40.522 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:37:40.523 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 13:37:40.534 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:37:40.549 +07:00 [INF] Fetching user with Username: audi
2024-08-05 13:37:40.583 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:37:40.597 +07:00 [INF] Executed DbCommand (8ms) [Parameters=[@__username_0='?' (Size = 4000), @__passwordHash_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[CreatedAt], [u].[Email], [u].[PasswordHash], [u].[Username]
FROM [Users] AS [u]
WHERE ([u].[Username] = @__username_0) AND ([u].[PasswordHash] = @__passwordHash_1)
2024-08-05 13:37:40.604 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 13:37:40.605 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 64.6039ms
2024-08-05 13:37:40.607 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 13:37:40.608 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 87.7386ms
2024-08-05 13:37:40.664 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:37:40.665 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:37:40.665 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:37:40.669 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:37:40.672 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:37:40.672 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:37:40.684 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 13:37:40.721 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:37:40.742 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:37:40.757 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 87.5026ms
2024-08-05 13:37:40.760 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:37:40.758 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:37:40.761 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:37:40.761 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 97.0240ms
2024-08-05 13:37:40.762 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:37:40.765 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:37:40.766 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:37:40.781 +07:00 [INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 13:37:40.795 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:37:40.797 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 32.3237ms
2024-08-05 13:37:40.797 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:37:40.798 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 55.7710ms
2024-08-05 13:40:57.693 +07:00 [INF] Application Starting
2024-08-05 13:40:58.505 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:40:58.510 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:40:58.510 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:40:58.627 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:40:58.924 +07:00 [INF] Executed DbCommand (19ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2024-08-05 13:40:58.997 +07:00 [INF] Executed DbCommand (58ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']

IF EXISTS
    (SELECT *
     FROM [sys].[objects] o
     WHERE [o].[type] = 'U'
     AND [o].[is_ms_shipped] = 0
     AND NOT EXISTS (SELECT *
         FROM [sys].[extended_properties] AS [ep]
         WHERE [ep].[major_id] = [o].[object_id]
             AND [ep].[minor_id] = 0
             AND [ep].[class] = 1
             AND [ep].[name] = N'microsoft_database_tools_support'
    )
)
SELECT 1 ELSE SELECT 0
2024-08-05 13:40:59.002 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 13:40:59.131 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 13:40:59.132 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 13:40:59.132 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 13:40:59.133 +07:00 [INF] Hosting environment: Development
2024-08-05 13:40:59.134 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 13:40:59.777 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 13:41:00.030 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 255.7165ms
2024-08-05 13:41:00.033 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 13:41:00.033 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 13:41:00.043 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 10.2389ms
2024-08-05 13:41:00.080 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 46.9823ms
2024-08-05 13:41:00.113 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 13:41:00.197 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 84.4004ms
2024-08-05 13:41:08.934 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:41:08.971 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:41:08.977 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:41:09.005 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:41:09.019 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:41:09.020 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:41:09.424 +07:00 [INF] Executed DbCommand (51ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 13:41:09.556 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:41:09.610 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:41:09.611 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:41:09.615 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:41:09.617 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:41:09.620 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:41:09.622 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 609.6356ms
2024-08-05 13:41:09.624 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:41:09.639 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 704.9309ms
2024-08-05 13:41:09.676 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:41:09.680 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 13:41:09.684 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:41:09.699 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 81.4106ms
2024-08-05 13:41:09.700 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:41:09.701 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 91.6302ms
2024-08-05 13:41:17.759 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 13:41:17.761 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:41:17.762 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview)'
2024-08-05 13:41:17.765 +07:00 [INF] Route matched with {action = "GetUsers", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.User]]] GetUsers() on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:41:17.767 +07:00 [INF] Fetching all users.
2024-08-05 13:41:17.768 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:41:17.777 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [u].[UserId], [u].[CreatedAt], [u].[Email], [u].[PasswordHash], [u].[Username]
FROM [Users] AS [u]
2024-08-05 13:41:17.785 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.User, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:41:17.787 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview) in 21.2094ms
2024-08-05 13:41:17.792 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview)'
2024-08-05 13:41:17.793 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 33.6513ms
2024-08-05 13:41:17.838 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:41:17.840 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:41:17.840 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:41:17.841 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:41:17.842 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:41:17.842 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:41:17.846 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 13:41:17.851 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:41:17.859 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 17.2578ms
2024-08-05 13:41:17.861 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:41:17.861 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 22.9661ms
2024-08-05 13:41:17.860 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:41:17.862 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:41:17.863 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:41:17.863 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:41:17.864 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:41:17.866 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:41:17.870 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 13:41:17.886 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:41:17.890 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 26.6499ms
2024-08-05 13:41:17.893 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:41:17.893 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 33.2371ms
2024-08-05 13:44:40.214 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 13:44:40.226 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 12.2379ms
2024-08-05 13:44:40.238 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 13:44:40.239 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 0.7090ms
2024-08-05 13:44:40.241 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 13:44:40.256 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 14.2910ms
2024-08-05 13:44:40.295 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 13:44:40.300 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 4.1710ms
2024-08-05 13:44:45.462 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users - -
2024-08-05 13:44:45.463 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview)'
2024-08-05 13:44:45.464 +07:00 [INF] Route matched with {action = "GetUsers", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.User]]] GetUsers() on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:44:45.465 +07:00 [INF] Fetching all users.
2024-08-05 13:44:45.466 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:44:45.472 +07:00 [INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [u].[UserId], [u].[CreatedAt], [u].[Email], [u].[PasswordHash], [u].[Username]
FROM [Users] AS [u]
2024-08-05 13:44:45.474 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.User, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:44:45.475 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview) in 10.8956ms
2024-08-05 13:44:45.476 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview)'
2024-08-05 13:44:45.477 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users - - - 200 - application/json;+charset=utf-8 14.8210ms
2024-08-05 13:45:50.059 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users - -
2024-08-05 13:45:50.060 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:45:50.061 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview)'
2024-08-05 13:45:50.061 +07:00 [INF] Route matched with {action = "GetUsers", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.User]]] GetUsers() on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:45:50.062 +07:00 [INF] Fetching all users.
2024-08-05 13:45:50.063 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:45:50.068 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [u].[UserId], [u].[CreatedAt], [u].[Email], [u].[PasswordHash], [u].[Username]
FROM [Users] AS [u]
2024-08-05 13:45:50.069 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.User, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:45:50.070 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview) in 8.2385ms
2024-08-05 13:45:50.071 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview)'
2024-08-05 13:45:50.072 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users - - - 200 - application/json;+charset=utf-8 13.3738ms
2024-08-05 13:50:47.615 +07:00 [INF] Application Starting
2024-08-05 13:50:48.374 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:50:48.378 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:50:48.379 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:50:48.477 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:50:48.763 +07:00 [INF] Executed DbCommand (17ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2024-08-05 13:50:48.827 +07:00 [INF] Executed DbCommand (41ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']

IF EXISTS
    (SELECT *
     FROM [sys].[objects] o
     WHERE [o].[type] = 'U'
     AND [o].[is_ms_shipped] = 0
     AND NOT EXISTS (SELECT *
         FROM [sys].[extended_properties] AS [ep]
         WHERE [ep].[major_id] = [o].[object_id]
             AND [ep].[minor_id] = 0
             AND [ep].[class] = 1
             AND [ep].[name] = N'microsoft_database_tools_support'
    )
)
SELECT 1 ELSE SELECT 0
2024-08-05 13:50:48.833 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 13:50:48.961 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 13:50:48.962 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 13:50:48.962 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 13:50:48.963 +07:00 [INF] Hosting environment: Development
2024-08-05 13:50:48.964 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 13:50:49.154 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 13:50:49.391 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 239.4995ms
2024-08-05 13:50:49.393 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 13:50:49.393 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 13:50:49.410 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 16.1248ms
2024-08-05 13:50:49.446 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 52.3991ms
2024-08-05 13:50:49.492 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 13:50:49.591 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 98.9930ms
2024-08-05 13:50:58.010 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users - -
2024-08-05 13:50:58.048 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:50:58.054 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview)'
2024-08-05 13:50:58.079 +07:00 [INF] Route matched with {action = "GetUsers", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.User]]] GetUsers() on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:50:58.092 +07:00 [INF] Fetching all users.
2024-08-05 13:50:58.114 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:50:58.456 +07:00 [INF] Executed DbCommand (35ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [u].[UserId], [u].[CreatedAt], [u].[Email], [u].[PasswordHash], [u].[Username]
FROM [Users] AS [u]
2024-08-05 13:50:58.552 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.User, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:50:58.598 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview) in 510.311ms
2024-08-05 13:50:58.603 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview)'
2024-08-05 13:50:58.619 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users - - - 200 - application/json;+charset=utf-8 609.1501ms
2024-08-05 13:50:58.836 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:50:58.838 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:50:58.839 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:50:58.842 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:50:58.845 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:50:58.903 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:50:58.913 +07:00 [INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 13:50:58.948 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:50:58.968 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:50:58.970 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:50:58.970 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:50:58.973 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:50:58.977 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:50:58.980 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:50:58.987 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 13:50:58.988 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 144.5525ms
2024-08-05 13:50:58.990 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:50:58.993 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 156.8104ms
2024-08-05 13:50:58.994 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:50:58.997 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 19.6016ms
2024-08-05 13:50:59.000 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:50:59.001 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 33.4512ms
2024-08-05 13:51:20.831 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Orders - -
2024-08-05 13:51:20.832 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:20.834 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Orders - - - 204 - - 2.8059ms
2024-08-05 13:51:20.838 +07:00 [INF] Request starting HTTP/2 POST https://localhost:7040/api/Orders application/json 245
2024-08-05 13:51:20.838 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:20.839 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.PostOrder (webapi-shopping-interview)'
2024-08-05 13:51:20.852 +07:00 [INF] Route matched with {action = "PostOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] PostOrder(webapi_shopping_interview.Model.Order) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 13:51:20.925 +07:00 [INF] Creating a new order.
2024-08-05 13:51:20.927 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:51:21.196 +07:00 [INF] Executed DbCommand (37ms) [Parameters=[@p0='?' (DbType = DateTime2), @p1='?' (Size = 4000), @p2='?' (Precision = 18) (Scale = 2) (DbType = Decimal), @p3='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [Orders] ([OrderDate], [Status], [Total], [UserId])
VALUES (@p0, @p1, @p2, @p3);
SELECT [OrderId]
FROM [Orders]
WHERE @@ROWCOUNT = 1 AND [OrderId] = scope_identity();
2024-08-05 13:51:21.281 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (Precision = 18) (Scale = 2) (DbType = Decimal), @p2='?' (DbType = Int32), @p3='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [OrderItems] ([OrderId], [Price], [ProductId], [Quantity])
VALUES (@p0, @p1, @p2, @p3);
SELECT [OrderItemId]
FROM [OrderItems]
WHERE @@ROWCOUNT = 1 AND [OrderItemId] = scope_identity();
2024-08-05 13:51:21.283 +07:00 [INF] Executed DbCommand (0ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (Precision = 18) (Scale = 2) (DbType = Decimal), @p2='?' (DbType = Int32), @p3='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
INSERT INTO [OrderItems] ([OrderId], [Price], [ProductId], [Quantity])
VALUES (@p0, @p1, @p2, @p3);
SELECT [OrderItemId]
FROM [OrderItems]
WHERE @@ROWCOUNT = 1 AND [OrderItemId] = scope_identity();
2024-08-05 13:51:21.312 +07:00 [INF] Order with ID: 1 created successfully.
2024-08-05 13:51:21.314 +07:00 [INF] Executing CreatedAtActionResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 13:51:21.331 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.PostOrder (webapi-shopping-interview) in 476.3943ms
2024-08-05 13:51:21.332 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.PostOrder (webapi-shopping-interview)'
2024-08-05 13:51:21.333 +07:00 [INF] Request finished HTTP/2 POST https://localhost:7040/api/Orders application/json 245 - 201 - application/json;+charset=utf-8 495.0419ms
2024-08-05 13:51:21.335 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/1 - -
2024-08-05 13:51:21.335 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:21.335 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/1 - - - 204 - - 0.7099ms
2024-08-05 13:51:21.336 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/1 multipart/form-data;+boundary=----WebKitFormBoundaryzmGSxbvVhFOd0CGq 138
2024-08-05 13:51:21.337 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:21.337 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 13:51:21.351 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:51:21.367 +07:00 [INF] Updating stock for product with id 1.
2024-08-05 13:51:21.368 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:51:21.670 +07:00 [INF] Executed DbCommand (5ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
WHERE [p].[ProductId] = @__p_0
2024-08-05 13:51:21.692 +07:00 [INF] Executed DbCommand (5ms) [Parameters=[@p7='?' (DbType = Int32), @p0='?' (DbType = DateTime2), @p1='?' (Size = 4000), @p2='?' (Size = 8000) (DbType = Binary), @p3='?' (Size = 4000), @p4='?' (Precision = 18) (Scale = 2) (DbType = Decimal), @p5='?' (DbType = Int32), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [Products] SET [CreatedAt] = @p0, [Description] = @p1, [Image] = @p2, [Name] = @p3, [Price] = @p4, [Stock] = @p5, [UpdatedAt] = @p6
WHERE [ProductId] = @p7;
SELECT @@ROWCOUNT;
2024-08-05 13:51:21.696 +07:00 [INF] Stock for product with id 1 updated.
2024-08-05 13:51:21.701 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 13:51:21.701 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 349.565ms
2024-08-05 13:51:21.701 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 13:51:21.702 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/1 multipart/form-data;+boundary=----WebKitFormBoundaryzmGSxbvVhFOd0CGq 138 - 204 - - 365.4335ms
2024-08-05 13:51:21.705 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:7040/api/Products/2 - -
2024-08-05 13:51:21.714 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:21.715 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:7040/api/Products/2 - - - 204 - - 9.5304ms
2024-08-05 13:51:21.718 +07:00 [INF] Request starting HTTP/2 PUT https://localhost:7040/api/Products/2 multipart/form-data;+boundary=----WebKitFormBoundaryez6NyzWxfdudCPbk 138
2024-08-05 13:51:21.721 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:21.722 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 13:51:21.722 +07:00 [INF] Route matched with {action = "PutProduct", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] PutProduct(Int32, Int32) on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:51:21.723 +07:00 [INF] Updating stock for product with id 2.
2024-08-05 13:51:21.724 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:51:21.729 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
WHERE [p].[ProductId] = @__p_0
2024-08-05 13:51:21.732 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@p7='?' (DbType = Int32), @p0='?' (DbType = DateTime2), @p1='?' (Size = 4000), @p2='?' (Size = 8000) (DbType = Binary), @p3='?' (Size = 4000), @p4='?' (Precision = 18) (Scale = 2) (DbType = Decimal), @p5='?' (DbType = Int32), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET NOCOUNT ON;
UPDATE [Products] SET [CreatedAt] = @p0, [Description] = @p1, [Image] = @p2, [Name] = @p3, [Price] = @p4, [Stock] = @p5, [UpdatedAt] = @p6
WHERE [ProductId] = @p7;
SELECT @@ROWCOUNT;
2024-08-05 13:51:21.734 +07:00 [INF] Stock for product with id 2 updated.
2024-08-05 13:51:21.734 +07:00 [INF] Executing StatusCodeResult, setting HTTP status code 204
2024-08-05 13:51:21.735 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview) in 12.2154ms
2024-08-05 13:51:21.735 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.PutProduct (webapi-shopping-interview)'
2024-08-05 13:51:21.736 +07:00 [INF] Request finished HTTP/2 PUT https://localhost:7040/api/Products/2 multipart/form-data;+boundary=----WebKitFormBoundaryez6NyzWxfdudCPbk 138 - 204 - - 17.9708ms
2024-08-05 13:51:21.738 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:51:21.739 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:21.739 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:51:21.739 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:51:21.740 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:51:21.740 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:51:21.748 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 13:51:21.758 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:51:21.762 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 22.0963ms
2024-08-05 13:51:21.772 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:51:21.773 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 34.3645ms
2024-08-05 13:51:25.229 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 13:51:25.230 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:51:25.235 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:25.236 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:25.236 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 13:51:25.236 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:51:25.237 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:51:25.238 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:51:25.239 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:51:25.239 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 13:51:25.241 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 13:51:25.243 +07:00 [INF] Fetching all orders.
2024-08-05 13:51:25.249 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:51:25.249 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:51:25.254 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 16.4351ms
2024-08-05 13:51:25.255 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:51:25.256 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:51:25.256 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:25.256 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 26.3678ms
2024-08-05 13:51:25.257 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:51:25.258 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:51:25.259 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:51:25.260 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:51:25.262 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 13:51:25.265 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:51:25.266 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 7.4301ms
2024-08-05 13:51:25.267 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:51:25.268 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 13.1331ms
2024-08-05 13:51:25.435 +07:00 [INF] Executed DbCommand (26ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [o].[OrderId], [o].[OrderDate], [o].[Status], [o].[Total], [o].[UserId], [t].[OrderItemId], [t].[OrderId], [t].[Price], [t].[ProductId], [t].[Quantity], [t].[ProductId0], [t].[CreatedAt], [t].[Description], [t].[Image], [t].[Name], [t].[Price0], [t].[Stock], [t].[UpdatedAt]
FROM [Orders] AS [o]
LEFT JOIN (
    SELECT [o0].[OrderItemId], [o0].[OrderId], [o0].[Price], [o0].[ProductId], [o0].[Quantity], [p].[ProductId] AS [ProductId0], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price] AS [Price0], [p].[Stock], [p].[UpdatedAt]
    FROM [OrderItems] AS [o0]
    INNER JOIN [Products] AS [p] ON [o0].[ProductId] = [p].[ProductId]
) AS [t] ON [o].[OrderId] = [t].[OrderId]
ORDER BY [o].[OrderId], [t].[OrderItemId]
2024-08-05 13:51:25.441 +07:00 [INF] Fetched 1 orders.
2024-08-05 13:51:25.442 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:51:25.442 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 201.0071ms
2024-08-05 13:51:25.444 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 13:51:25.444 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:25.445 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 13:51:25.446 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 13:51:25.447 +07:00 [INF] Fetching all orders.
2024-08-05 13:51:25.448 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:51:25.444 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 13:51:25.454 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 225.6344ms
2024-08-05 13:51:25.454 +07:00 [INF] Executed DbCommand (5ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [o].[OrderId], [o].[OrderDate], [o].[Status], [o].[Total], [o].[UserId], [t].[OrderItemId], [t].[OrderId], [t].[Price], [t].[ProductId], [t].[Quantity], [t].[ProductId0], [t].[CreatedAt], [t].[Description], [t].[Image], [t].[Name], [t].[Price0], [t].[Stock], [t].[UpdatedAt]
FROM [Orders] AS [o]
LEFT JOIN (
    SELECT [o0].[OrderItemId], [o0].[OrderId], [o0].[Price], [o0].[ProductId], [o0].[Quantity], [p].[ProductId] AS [ProductId0], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price] AS [Price0], [p].[Stock], [p].[UpdatedAt]
    FROM [OrderItems] AS [o0]
    INNER JOIN [Products] AS [p] ON [o0].[ProductId] = [p].[ProductId]
) AS [t] ON [o].[OrderId] = [t].[OrderId]
ORDER BY [o].[OrderId], [t].[OrderItemId]
2024-08-05 13:51:25.456 +07:00 [INF] Fetched 1 orders.
2024-08-05 13:51:25.456 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:51:25.457 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 10.0067ms
2024-08-05 13:51:25.458 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 13:51:25.458 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 14.2677ms
2024-08-05 13:51:26.403 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders/1 - -
2024-08-05 13:51:26.403 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:26.404 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 13:51:26.407 +07:00 [INF] Route matched with {action = "GetOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] GetOrder(Int32) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 13:51:26.410 +07:00 [INF] Fetching order with ID: 1
2024-08-05 13:51:26.410 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:51:26.433 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [t].[OrderId], [t].[OrderDate], [t].[Status], [t].[Total], [t].[UserId], [t0].[OrderItemId], [t0].[OrderId], [t0].[Price], [t0].[ProductId], [t0].[Quantity], [t0].[ProductId0], [t0].[CreatedAt], [t0].[Description], [t0].[Image], [t0].[Name], [t0].[Price0], [t0].[Stock], [t0].[UpdatedAt]
FROM (
    SELECT TOP(1) [o].[OrderId], [o].[OrderDate], [o].[Status], [o].[Total], [o].[UserId]
    FROM [Orders] AS [o]
    WHERE [o].[OrderId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [o0].[OrderItemId], [o0].[OrderId], [o0].[Price], [o0].[ProductId], [o0].[Quantity], [p].[ProductId] AS [ProductId0], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price] AS [Price0], [p].[Stock], [p].[UpdatedAt]
    FROM [OrderItems] AS [o0]
    INNER JOIN [Products] AS [p] ON [o0].[ProductId] = [p].[ProductId]
) AS [t0] ON [t].[OrderId] = [t0].[OrderId]
ORDER BY [t].[OrderId], [t0].[OrderItemId]
2024-08-05 13:51:26.434 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 13:51:26.435 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview) in 26.4403ms
2024-08-05 13:51:26.435 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 13:51:26.438 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders/1 - - - 200 - application/json;+charset=utf-8 35.4269ms
2024-08-05 13:51:28.060 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders/1 - -
2024-08-05 13:51:28.060 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:28.061 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 13:51:28.062 +07:00 [INF] Route matched with {action = "GetOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] GetOrder(Int32) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 13:51:28.063 +07:00 [INF] Fetching order with ID: 1
2024-08-05 13:51:28.064 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:51:28.066 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [t].[OrderId], [t].[OrderDate], [t].[Status], [t].[Total], [t].[UserId], [t0].[OrderItemId], [t0].[OrderId], [t0].[Price], [t0].[ProductId], [t0].[Quantity], [t0].[ProductId0], [t0].[CreatedAt], [t0].[Description], [t0].[Image], [t0].[Name], [t0].[Price0], [t0].[Stock], [t0].[UpdatedAt]
FROM (
    SELECT TOP(1) [o].[OrderId], [o].[OrderDate], [o].[Status], [o].[Total], [o].[UserId]
    FROM [Orders] AS [o]
    WHERE [o].[OrderId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [o0].[OrderItemId], [o0].[OrderId], [o0].[Price], [o0].[ProductId], [o0].[Quantity], [p].[ProductId] AS [ProductId0], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price] AS [Price0], [p].[Stock], [p].[UpdatedAt]
    FROM [OrderItems] AS [o0]
    INNER JOIN [Products] AS [p] ON [o0].[ProductId] = [p].[ProductId]
) AS [t0] ON [t].[OrderId] = [t0].[OrderId]
ORDER BY [t].[OrderId], [t0].[OrderItemId]
2024-08-05 13:51:28.068 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 13:51:28.069 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview) in 6.241ms
2024-08-05 13:51:28.070 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 13:51:28.070 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders/1 - - - 200 - application/json;+charset=utf-8 10.4883ms
2024-08-05 13:51:35.006 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users - -
2024-08-05 13:51:35.007 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:35.008 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview)'
2024-08-05 13:51:35.008 +07:00 [INF] Route matched with {action = "GetUsers", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.User]]] GetUsers() on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 13:51:35.009 +07:00 [INF] Fetching all users.
2024-08-05 13:51:35.010 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:51:35.014 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [u].[UserId], [u].[CreatedAt], [u].[Email], [u].[PasswordHash], [u].[Username]
FROM [Users] AS [u]
2024-08-05 13:51:35.016 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.User, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:51:35.016 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview) in 7.1303ms
2024-08-05 13:51:35.018 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUsers (webapi-shopping-interview)'
2024-08-05 13:51:35.018 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users - - - 200 - application/json;+charset=utf-8 11.8867ms
2024-08-05 13:51:35.076 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:51:35.077 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:35.079 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:51:35.081 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:51:35.083 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:51:35.083 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:51:35.085 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 13:51:35.088 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:51:35.090 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 7.276ms
2024-08-05 13:51:35.090 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:51:35.091 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:51:35.091 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 15.2958ms
2024-08-05 13:51:35.092 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:51:35.093 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:51:35.093 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:51:35.094 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:51:35.095 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:51:35.097 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 13:51:35.100 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:51:35.101 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 7.3849ms
2024-08-05 13:51:35.104 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:51:35.105 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 13.8866ms
2024-08-05 13:55:02.818 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 13:55:02.821 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:55:02.822 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 13:55:02.822 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 13:55:02.823 +07:00 [INF] Fetching all orders.
2024-08-05 13:55:02.821 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:55:02.824 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:55:02.824 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:55:02.825 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:55:02.825 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:55:02.826 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:55:02.831 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:55:02.835 +07:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 13:55:02.871 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:55:02.872 +07:00 [INF] Executed DbCommand (6ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [o].[OrderId], [o].[OrderDate], [o].[Status], [o].[Total], [o].[UserId], [t].[OrderItemId], [t].[OrderId], [t].[Price], [t].[ProductId], [t].[Quantity], [t].[ProductId0], [t].[CreatedAt], [t].[Description], [t].[Image], [t].[Name], [t].[Price0], [t].[Stock], [t].[UpdatedAt]
FROM [Orders] AS [o]
LEFT JOIN (
    SELECT [o0].[OrderItemId], [o0].[OrderId], [o0].[Price], [o0].[ProductId], [o0].[Quantity], [p].[ProductId] AS [ProductId0], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price] AS [Price0], [p].[Stock], [p].[UpdatedAt]
    FROM [OrderItems] AS [o0]
    INNER JOIN [Products] AS [p] ON [o0].[ProductId] = [p].[ProductId]
) AS [t] ON [o].[OrderId] = [t].[OrderId]
ORDER BY [o].[OrderId], [t].[OrderItemId]
2024-08-05 13:55:02.885 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 59.8958ms
2024-08-05 13:55:02.888 +07:00 [INF] Fetched 1 orders.
2024-08-05 13:55:02.893 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:55:02.894 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 71.0977ms
2024-08-05 13:55:02.894 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 13:55:02.895 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 76.7295ms
2024-08-05 13:55:02.891 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:55:02.896 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 75.0959ms
2024-08-05 13:55:02.903 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders - -
2024-08-05 13:55:02.900 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 13:55:02.907 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:55:02.908 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:55:02.908 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 13:55:02.909 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:55:02.909 +07:00 [INF] Route matched with {action = "GetOrders", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Order]]] GetOrders() on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 13:55:02.912 +07:00 [INF] Fetching all orders.
2024-08-05 13:55:02.914 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:55:02.910 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 13:55:02.927 +07:00 [INF] Fetching all products from the database.
2024-08-05 13:55:02.928 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:55:02.931 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 13:55:02.932 +07:00 [INF] Executed DbCommand (17ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [o].[OrderId], [o].[OrderDate], [o].[Status], [o].[Total], [o].[UserId], [t].[OrderItemId], [t].[OrderId], [t].[Price], [t].[ProductId], [t].[Quantity], [t].[ProductId0], [t].[CreatedAt], [t].[Description], [t].[Image], [t].[Name], [t].[Price0], [t].[Stock], [t].[UpdatedAt]
FROM [Orders] AS [o]
LEFT JOIN (
    SELECT [o0].[OrderItemId], [o0].[OrderId], [o0].[Price], [o0].[ProductId], [o0].[Quantity], [p].[ProductId] AS [ProductId0], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price] AS [Price0], [p].[Stock], [p].[UpdatedAt]
    FROM [OrderItems] AS [o0]
    INNER JOIN [Products] AS [p] ON [o0].[ProductId] = [p].[ProductId]
) AS [t] ON [o].[OrderId] = [t].[OrderId]
ORDER BY [o].[OrderId], [t].[OrderItemId]
2024-08-05 13:55:02.935 +07:00 [INF] Fetched 1 orders.
2024-08-05 13:55:02.936 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Order, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:55:02.936 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 13:55:02.937 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview) in 24.8981ms
2024-08-05 13:55:02.939 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrders (webapi-shopping-interview)'
2024-08-05 13:55:02.939 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 12.6339ms
2024-08-05 13:55:02.939 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders - - - 200 - application/json;+charset=utf-8 36.7264ms
2024-08-05 13:55:02.940 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 13:55:02.941 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 41.4706ms
2024-08-05 13:55:03.731 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders/1 - -
2024-08-05 13:55:03.732 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:55:03.732 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 13:55:03.733 +07:00 [INF] Route matched with {action = "GetOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] GetOrder(Int32) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 13:55:03.734 +07:00 [INF] Fetching order with ID: 1
2024-08-05 13:55:03.734 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:55:03.743 +07:00 [INF] Executed DbCommand (7ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [t].[OrderId], [t].[OrderDate], [t].[Status], [t].[Total], [t].[UserId], [t0].[OrderItemId], [t0].[OrderId], [t0].[Price], [t0].[ProductId], [t0].[Quantity], [t0].[ProductId0], [t0].[CreatedAt], [t0].[Description], [t0].[Image], [t0].[Name], [t0].[Price0], [t0].[Stock], [t0].[UpdatedAt]
FROM (
    SELECT TOP(1) [o].[OrderId], [o].[OrderDate], [o].[Status], [o].[Total], [o].[UserId]
    FROM [Orders] AS [o]
    WHERE [o].[OrderId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [o0].[OrderItemId], [o0].[OrderId], [o0].[Price], [o0].[ProductId], [o0].[Quantity], [p].[ProductId] AS [ProductId0], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price] AS [Price0], [p].[Stock], [p].[UpdatedAt]
    FROM [OrderItems] AS [o0]
    INNER JOIN [Products] AS [p] ON [o0].[ProductId] = [p].[ProductId]
) AS [t0] ON [t].[OrderId] = [t0].[OrderId]
ORDER BY [t].[OrderId], [t0].[OrderItemId]
2024-08-05 13:55:03.745 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 13:55:03.746 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview) in 11.9916ms
2024-08-05 13:55:03.746 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 13:55:03.747 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders/1 - - - 200 - application/json;+charset=utf-8 15.6326ms
2024-08-05 13:55:05.018 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Orders/1 - -
2024-08-05 13:55:05.019 +07:00 [INF] CORS policy execution successful.
2024-08-05 13:55:05.020 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 13:55:05.020 +07:00 [INF] Route matched with {action = "GetOrder", controller = "Orders"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.Order]] GetOrder(Int32) on controller webapi_shopping_interview.Controllers.OrdersController (webapi-shopping-interview).
2024-08-05 13:55:05.021 +07:00 [INF] Fetching order with ID: 1
2024-08-05 13:55:05.022 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:55:05.032 +07:00 [INF] Executed DbCommand (8ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [t].[OrderId], [t].[OrderDate], [t].[Status], [t].[Total], [t].[UserId], [t0].[OrderItemId], [t0].[OrderId], [t0].[Price], [t0].[ProductId], [t0].[Quantity], [t0].[ProductId0], [t0].[CreatedAt], [t0].[Description], [t0].[Image], [t0].[Name], [t0].[Price0], [t0].[Stock], [t0].[UpdatedAt]
FROM (
    SELECT TOP(1) [o].[OrderId], [o].[OrderDate], [o].[Status], [o].[Total], [o].[UserId]
    FROM [Orders] AS [o]
    WHERE [o].[OrderId] = @__id_0
) AS [t]
LEFT JOIN (
    SELECT [o0].[OrderItemId], [o0].[OrderId], [o0].[Price], [o0].[ProductId], [o0].[Quantity], [p].[ProductId] AS [ProductId0], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price] AS [Price0], [p].[Stock], [p].[UpdatedAt]
    FROM [OrderItems] AS [o0]
    INNER JOIN [Products] AS [p] ON [o0].[ProductId] = [p].[ProductId]
) AS [t0] ON [t].[OrderId] = [t0].[OrderId]
ORDER BY [t].[OrderId], [t0].[OrderItemId]
2024-08-05 13:55:05.034 +07:00 [INF] Executing ObjectResult, writing value of type 'webapi_shopping_interview.Model.Order'.
2024-08-05 13:55:05.035 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview) in 13.2028ms
2024-08-05 13:55:05.035 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.OrdersController.GetOrder (webapi-shopping-interview)'
2024-08-05 13:55:05.036 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Orders/1 - - - 200 - application/json;+charset=utf-8 17.8952ms
2024-08-05 13:58:34.202 +07:00 [INF] Application Starting
2024-08-05 13:58:34.943 +07:00 [WRN] No store type was specified for the decimal property 'Total' on entity type 'Order'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:58:34.948 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'OrderItem'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:58:34.948 +07:00 [WRN] No store type was specified for the decimal property 'Price' on entity type 'Product'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
2024-08-05 13:58:35.046 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 13:58:35.333 +07:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2024-08-05 13:58:35.405 +07:00 [INF] Executed DbCommand (54ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']

IF EXISTS
    (SELECT *
     FROM [sys].[objects] o
     WHERE [o].[type] = 'U'
     AND [o].[is_ms_shipped] = 0
     AND NOT EXISTS (SELECT *
         FROM [sys].[extended_properties] AS [ep]
         WHERE [ep].[major_id] = [o].[object_id]
             AND [ep].[minor_id] = 0
             AND [ep].[class] = 1
             AND [ep].[name] = N'microsoft_database_tools_support'
    )
)
SELECT 1 ELSE SELECT 0
2024-08-05 13:58:35.451 +07:00 [INF] Database created successfully and seeding data.
2024-08-05 13:58:35.579 +07:00 [INF] Now listening on: https://localhost:7040
2024-08-05 13:58:35.581 +07:00 [INF] Now listening on: http://localhost:5170
2024-08-05 13:58:35.581 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2024-08-05 13:58:35.582 +07:00 [INF] Hosting environment: Development
2024-08-05 13:58:35.582 +07:00 [INF] Content root path: C:\jay\project\ShoppingInterview\webapi-shopping-interview\webapi-shopping-interview\
2024-08-05 13:58:35.763 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/index.html - -
2024-08-05 13:58:36.023 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/index.html - - - 200 - text/html;charset=utf-8 262.4461ms
2024-08-05 13:58:36.025 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - -
2024-08-05 13:58:36.025 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/_vs/browserLink - -
2024-08-05 13:58:36.036 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_framework/aspnetcore-browser-refresh.js - - - 200 13786 application/javascript;+charset=utf-8 10.0890ms
2024-08-05 13:58:36.073 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 47.3286ms
2024-08-05 13:58:36.106 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - -
2024-08-05 13:58:36.192 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 86.6651ms
2024-08-05 14:00:21.135 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - -
2024-08-05 14:00:21.172 +07:00 [INF] CORS policy execution successful.
2024-08-05 14:00:21.186 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 14:00:21.233 +07:00 [INF] Route matched with {action = "GetUser", controller = "Users"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[webapi_shopping_interview.Model.User]] GetUser(System.String, System.String) on controller webapi_shopping_interview.Controllers.UsersController (webapi-shopping-interview).
2024-08-05 14:00:21.277 +07:00 [INF] Fetching user with username: audi.
2024-08-05 14:00:21.281 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 14:00:22.036 +07:00 [INF] Executed DbCommand (139ms) [Parameters=[@__username_0='?' (Size = 4000), @__passwordHash_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [u].[UserId], [u].[CreatedAt], [u].[Email], [u].[PasswordHash], [u].[Username]
FROM [Users] AS [u]
WHERE ([u].[Username] = @__username_0) AND ([u].[PasswordHash] = @__passwordHash_1)
2024-08-05 14:00:22.120 +07:00 [INF] Executing OkObjectResult, writing value of type 'webapi_shopping_interview.Model.User'.
2024-08-05 14:00:22.150 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview) in 910.3114ms
2024-08-05 14:00:22.153 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.UsersController.GetUser (webapi-shopping-interview)'
2024-08-05 14:00:22.179 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Users?username=audi&passwordHash=1234 - - - 200 - application/json;+charset=utf-8 1043.7770ms
2024-08-05 14:00:22.432 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 14:00:22.435 +07:00 [INF] CORS policy execution successful.
2024-08-05 14:00:22.435 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 14:00:22.439 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 14:00:22.442 +07:00 [INF] Fetching all products from the database.
2024-08-05 14:00:22.479 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 14:00:22.498 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 14:00:22.539 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 14:00:22.561 +07:00 [INF] Request starting HTTP/2 GET https://localhost:7040/api/Products - -
2024-08-05 14:00:22.563 +07:00 [INF] CORS policy execution successful.
2024-08-05 14:00:22.564 +07:00 [INF] Executing endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 14:00:22.566 +07:00 [INF] Route matched with {action = "GetProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[webapi_shopping_interview.Model.Product]]] GetProducts() on controller webapi_shopping_interview.Controllers.ProductsController (webapi-shopping-interview).
2024-08-05 14:00:22.568 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 128.5805ms
2024-08-05 14:00:22.570 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 14:00:22.570 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 137.9909ms
2024-08-05 14:00:22.569 +07:00 [INF] Fetching all products from the database.
2024-08-05 14:00:22.571 +07:00 [INF] Entity Framework Core 6.0.0 initialized 'AppDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.0' with options: None
2024-08-05 14:00:22.577 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT [p].[ProductId], [p].[CreatedAt], [p].[Description], [p].[Image], [p].[Name], [p].[Price], [p].[Stock], [p].[UpdatedAt]
FROM [Products] AS [p]
2024-08-05 14:00:22.585 +07:00 [INF] Executing ObjectResult, writing value of type 'System.Collections.Generic.List`1[[webapi_shopping_interview.Model.Product, webapi-shopping-interview, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-08-05 14:00:22.608 +07:00 [INF] Executed action webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview) in 38.499ms
2024-08-05 14:00:22.609 +07:00 [INF] Executed endpoint 'webapi_shopping_interview.Controllers.ProductsController.GetProducts (webapi-shopping-interview)'
2024-08-05 14:00:22.609 +07:00 [INF] Request finished HTTP/2 GET https://localhost:7040/api/Products - - - 200 - application/json;+charset=utf-8 47.9181ms
